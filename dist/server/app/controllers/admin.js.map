{"version":3,"sources":["../../../../app/controllers/admin.js"],"names":["require","config","jwt","mongoose","User","model","Project","tokenValidityPeriod","exports","login","req","res","successRes","success","failRes","body","email","phone","query","findOne","exec","checkErr","user","message","name","status","json","comparePassword","password","passErr","isMatch","toJSON","isAdmin","signThis","id","_id","firstName","lastName","profilePhoto","token","sign","process","env","SECRET","expiresIn","activate_user","find","users","filter","u","userId","approve","decodedTokenData","updateOne","$set","activation","approveRequest","Boolean","n","revoke","deleteProject","projectId","findById","project","remove","console","log","deleteUser"],"mappings":"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","file":"admin.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nvar jwt = require(\"jsonwebtoken\");\nvar mongoose = require(\"mongoose\");\nvar User = mongoose.model(\"User\");\nvar Project = mongoose.model(\"Project\");\nvar tokenValidityPeriod = 86400; // in seconds; 86400 seconds = 24 hours\n\nexports.login = (req, res) => {\n  var successRes = { success: true };\n  var failRes = { success: false };\n\n  const { email, phone } = req.body,\n    query = email ? { email } : { phone };\n\n  User.findOne(query).exec((checkErr, user) => {\n    if (checkErr) {\n      failRes.message = checkErr.name + \": \" + checkErr.message;\n      return res.status(500).json(failRes);\n    }\n    if (!user) {\n      failRes.message =\n        \"Sela does not have an account with those user credentials. Please try another email/phone number or follow the link below to register\";\n      return res.status(401).json(failRes);\n    }\n\n    user.comparePassword(req.body.password, (passErr, isMatch) => {\n      if (passErr) {\n        failRes.message = passErr.name + \": \" + passErr.message;\n        return res.status(500).json(failRes);\n      }\n      if (!isMatch) {\n        failRes.message =\n          \"That is the wrong password for this account. Please try again\";\n        return res.status(401).json(failRes);\n      }\n\n      user = user.toJSON();\n\n      if (user.isAdmin == true) {\n        const signThis = {\n          id: user._id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profilePhoto: user.profilePhoto,\n          isAdmin: user.isAdmin\n        };\n\n        var token = jwt.sign(signThis, process.env.SECRET, {\n          expiresIn: tokenValidityPeriod\n        });\n\n        return res.status(200).json({\n          ...successRes,\n          token\n        });\n      } else {\n        failRes.message = \"Your are not an admin.\";\n        return res.status(401).json(failRes);\n      }\n    });\n  });\n};\n\nexports.activate_user = async (req, res) => { };\n\nexports.find = async (req, res) => {\n  let users = await User.find(\n    {},\n    \"activation firstName lastName isFunder isContractor isEvaluator createdOn organization email phone profilePhoto\"\n  );\n\n  users = users.filter(u => {\n    return u._id != req.userId;\n  });\n  return res.status(200).json(users);\n};\n\nexports.approve = async (req, res) => {\n  try {\n    if (req.decodedTokenData.isAdmin) {\n      let approveRequest = await User.updateOne(\n        { _id: req.body.id },\n        {\n          $set: { activation: \"approved\" }\n        }\n      );\n\n      if (Boolean(approveRequest.n))\n        return res.status(200).json({\n          activation: \"approved\"\n        });\n    }\n  } catch (error) {\n    res.status(401).json({\n      message: error.message\n    });\n  }\n};\n\nexports.revoke = async (req, res) => {\n  try {\n    if (req.decodedTokenData.isAdmin) {\n      let approveRequest = await User.updateOne(\n        { _id: req.body.id },\n        {\n          $set: { activation: \"revoked\" }\n        }\n      );\n\n      if (Boolean(approveRequest.n))\n        return res.status(200).json({\n          activation: \"revoked\"\n        });\n    }\n  } catch (error) {\n    res.status(401).json({\n      message: error.message\n    });\n  }\n};\n\n\nexports.deleteProject = async (req, res) => {\n  let projectId = req.query.id;\n\n  try {\n    if(projectId && projectId!==null){\n      let project= await Project.findById(projectId);\n      if(!project){\n        return res.status(404).json({ message: `Project doesn't exist` });\n      }\n  \n      await project.remove();\n      return res.status(200).json({message:\"Project deleted successfully\"})\n    }else{\n      await Project.remove({});\n      return res.status(200).json({message:\"Projects deleted successfully\"})\n\n    }\n    \n  } catch (error) {\n    console.log(error)\n    return res.status(500).json({ message: `internal server error` })\n\n  }\n}\n\nexports.deleteUser= async (req, res)=>{\n  let userId = req.query.id;\n\n  try {\n    if(userId && userId!==null){\n      let user= await User.findById(userId);\n      if(!user){\n        return res.status(404).json({ message: `User doesn't exist` });\n      }\n  \n      await user.remove();\n      return res.status(200).json({message:\"User deleted successfully\"})\n    }else{\n      await user.remove({});\n      return res.status(200).json({message:\"Users deleted successfully\"})\n    }\n    \n  } catch (error) {\n    console.log(error)\n    return res.status(500).json({ message: `internal server error` })\n\n  }\n}"]}