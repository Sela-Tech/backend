{"version":3,"sources":["../../../../app/controllers/crypto.js"],"names":["require","config","mongoose","Transaction","model","Project","Web3","rinkebynet","process","env","REACT_APP_RINKEBYNET","ropstentest","REACT_APP_ROPSTENNET","kovannet","REACT_APP_KOVANNET","mainnet","REACT_APP_MAINNET","web3","setProvider","providers","HttpProvider","exports","confirmTransaction","req","res","header","eth","getTransaction","body","hash","transaction","getBlockNumber","err","num","confirmations","blockNumber","Number","objToSave","value","receiver","to","sender","from","currency","project","projectId","memo","status","findOne","check","Boolean","console","log","save","saveRequest","_id","projectTransactions","toJSON","transactions","length","map","t","updateOne","$set","saveToProjectRequest","n","json","success","message"],"mappings":"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","file":"crypto.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nconst mongoose = require(\"mongoose\");\nconst Transaction = mongoose.model(\"Transaction\");\nconst Project = mongoose.model(\"Project\");\n\nconst Web3 = require(\"web3\");\n\nconst rinkebynet = process.env.REACT_APP_RINKEBYNET,\n  ropstentest = process.env.REACT_APP_ROPSTENNET,\n  kovannet = process.env.REACT_APP_KOVANNET,\n  mainnet = process.env.REACT_APP_MAINNET;\n\nconst web3 = new Web3();\nweb3.setProvider(new web3.providers.HttpProvider(mainnet));\n\nexports.confirmTransaction = async (req, res) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n\n  try {\n    let transaction = await web3.eth.getTransaction(req.body.hash);\n    // Get current block number\n    web3.eth.getBlockNumber(async (err, num) => {\n      try {\n        if (num && transaction) {\n          const confirmations = num - transaction.blockNumber;\n          if (Number(confirmations) > 30) {\n            let objToSave = {\n              value: transaction.value / 1.0e18,\n              receiver: transaction.to,\n              sender: transaction.from,\n              hash: req.body.hash,\n              currency: \"Ether\",\n              blockNumber: transaction.blockNumber,\n              project: req.body.projectId,\n              memo: transaction.memo,\n              status: \"CONFIRMED\"\n            };\n\n            let check = await Transaction.findOne({\n              hash: req.body.hash,\n              project: req.body.projectId\n            });\n\n            if (Boolean(check) === false) {\n              console.log(\"made it here\");\n              let saveRequest = await new Transaction(objToSave).save();\n\n              let project = await Project.findOne({\n                _id: req.body.projectId\n              });\n\n              let projectTransactions = project.toJSON();\n              projectTransactions = projectTransactions.transactions;\n\n              if (projectTransactions.length > 0) {\n                projectTransactions = projectTransactions.map(t => {\n                  return t._id;\n                });\n              }\n              let saveToProjectRequest = await Project.updateOne(\n                {\n                  _id: req.body.projectId\n                },\n                {\n                  $set: {\n                    transactions: [...projectTransactions, saveRequest._id]\n                  }\n                }\n              );\n\n              // console.log({\n              //   transactions: [...projectTransactions, saveRequest._id]\n              // });\n\n              if (Boolean(saveToProjectRequest.n)) {\n                return res.status(200).json({\n                  success: true,\n                  message: \"This Transaction Has Been Confirmed\"\n                });\n              } else {\n                return res.status(424).json({\n                  success: false,\n                  message: \"This Transaction Has Not Been Confirmed\"\n                });\n              }\n            } else {\n              return res.status(409).json({\n                success: false,\n                message: \"This Transaction Has Already Been Recorded\"\n              });\n            }\n          }\n        } else {\n          return res.status(403).json({\n            success: false,\n            message:\n              \"This Transaction Has Not Obtained Adequate Block Confirmations.\"\n          });\n        }\n      } catch (error) {\n        return res.json({\n          success: false,\n          message: error.message\n        });\n      }\n    });\n  } catch (error) {\n    return res.json({\n      success: false,\n      message: error.message\n    });\n  }\n};\n"]}