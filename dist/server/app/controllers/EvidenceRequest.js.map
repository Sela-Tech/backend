{"version":3,"sources":["../../../../app/controllers/EvidenceRequest.js"],"names":["require","config","mongoose","Task","model","Project","Proposal","User","Evidence","Submission","Milestone","validate","_","noticate","AccessControl","grantsObject","Helper","helper","ac","Evidences","req","res","datatypes","validateAddEvidenceRequest","errors","validationErrors","status","json","message","body","title","project","level","task","instruction","quote","stakeholders","datatype","fields","dueDate","totalPrice","findById","foundProject","userAddedHimself","some","stakeholder","userId","KPIObj","uniqBy","map","user","Number","length","requestedBy","fieldObj","evidenceRequest","Array","field","replace","c","toUpperCase","responseType","push","save","console","log","evidenceRequestId","file","evidenceObj","findOne","_id","extractedStakeholder","find","toString","undefined","Object","getOwnPropertyNames","hasSubmitted","evidencefields","fieldsTitle","f","evidencefieldsTitle","filter","fieldsNotInRequest","includes","data","value","isNaN","Date","submissions","updateOne","$set","id","params","$or","sort","createdAt","evidenceRequests","populateUser","populateTask","filterSubmissions","note","evidence","submissionObj","projectStakeholders","isProjectStakeholder","s","information","foundTask","submission","proposalId","query","generalSubmissions","owner","$exists","$where","evidenceRequestSubmissions","proposal","proposedBy","assignedTo","projectLevelSubmissions","filterProjectLevelSubmission","taskLevelSubmissions","milestones","milestone","tasks","filterTaskLevelSubmission","fullName","firstName","lastName","profilePhoto","name","generalSub","evidenceRequestSub","requested","others","updatedAt","other","toJSON","createdBy","description","estimatedCost","totalSubmissions","isStakeholder","module","exports"],"mappings":"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","file":"EvidenceRequest.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nconst mongoose = require(\"mongoose\"),\n    Task = mongoose.model(\"Task\"),\n    Project = mongoose.model(\"Project\"),\n    Proposal = mongoose.model(\"Proposal\"),\n    User = mongoose.model(\"User\"),\n    Evidence = mongoose.model(\"Evidence\"),\n    Submission = mongoose.model(\"Submission\"),\n    Milestone = mongoose.model('Milestone');\nconst validate = require('../../middleware/validate');\nconst _ = require('lodash');\nconst noticate = require('../helper/notifications');\nconst { AccessControl } = require('accesscontrol');\n\nconst grantsObject = require('../helper/access_control');\nconst Helper = require('../helper/helper');\n\n\nconst helper = new Helper();\nconst ac = new AccessControl(grantsObject);\n\nclass Evidences {\n\n    // constructor(){\n    //     this.populateUser=this.populateUser.bind(this)\n    // }\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} user\n     * @returns\n     * @memberof Evidences\n     */\n    static populateUser(user) {\n        if (user == null) {\n            return null\n        }\n        return {\n            fullName: `${user.firstName} ${user.lastName}`,\n            _id: user._id,\n            profilePhoto: user.profilePhoto\n        }\n    }\n\n    static populateTask(task) {\n        if (task == null) {\n            return null\n        }\n        return {\n            _id: task._id,\n            name: task.name\n        }\n    }\n\n    static filterProjectLevelSubmission(generalSub, evidenceRequestSub) {\n        let requested = evidenceRequestSub.filter(submission => submission.level === 'project');\n        let others = generalSub.filter(submission => submission.level === 'project');\n\n        // const totalRequest= requested.length, totalOther= other.length;\n\n        return { requested, others }\n    }\n\n    static filterTaskLevelSubmission(user, task, generalSub, evidenceRequestSub) {\n        // let allTaskSubmissions = Array.prototype.concat.call([], generalSub, evidenceRequestSub).filter(submission => submission.level === 'task');\n        let requested = evidenceRequestSub.filter(submission => submission.level === 'task' && submission.task._id.toString() === task._id.toString())\n            .map((requested) => {\n                return {\n                    _id: requested._id,\n                    title:requested.title,\n                    datatype:requested.datatype,\n                    updatedAt: requested.updatedAt,\n                    task: {\n                        _id: requested.task._id,\n                    },\n                    stakeholders: requested.stakeholders.map(stakeholder => {\n                        return {\n                            hasSubmitted: stakeholder.hasSubmitted,\n                            quote: stakeholder.quote,\n                            user: Evidences.populateUser(stakeholder.user)\n                        }\n                    }),\n                    fields:requested.fields,\n                    submissions: Evidences.filterSubmissions(user, requested.submissions, requested.stakeholders, requested.requestedBy),\n                // submissions:requested.submissions\n\n                }\n            });\n        let others = generalSub.filter(submission => submission.level === 'task' && submission.task._id.toString() === task._id.toString())\n        .map((other)=>{\n            return{\n                _id: other._id,\n                    title:other.title,\n                    datatype:other.datatype,\n                    updatedAt: other.updatedAt,\n                    task: {\n                        _id: other.task._id,\n                    },\n                    stakeholder:Evidences.populateUser(other.stakeholder),\n                    evidence:other.evidence,\n                    updatedAt:other.updatedAt\n            }\n        });\n\n        task = task.toJSON()\n        delete task.assignedTo\n        delete task.createdBy\n        delete task.status\n        delete task.description\n        delete task.estimatedCost\n\n        task.totalSubmissions = requested.length + others.length;\n        task.requested = requested;\n        task.others = others;\n        return task\n        // return { requested, others };\n    }\n\n    static filterSubmissions(user, submissions, stakeholders, requestedBy) {\n        let isStakeholder = stakeholders.some(stakeholder => stakeholder.user._id.toString() === user);\n        if (isStakeholder) {\n            return submissions = submissions.filter(submission => submission.user === user)\n        } else if (!isStakeholder && requestedBy._id.toString() === user) {//he who sent the request\n            return submissions\n        } else {\n            return [];\n        }\n\n    }\n\n    static filterStakeholders(user, stakeholders, requestedBy) {\n        let isStakeholder = stakeholders.some(stakeholder => stakeholder.user._id.toString() === user);\n        if (isStakeholder) {\n            return stakeholders = stakeholders.filter(stakeholder => stakeholder.user._id.toString() === user)\n        } else if (!isStakeholder && requestedBy._id.toString() === user) {//he who sent the request\n            return stakeholders\n        } else {\n            return [];\n        }\n\n    }\n\n    // KPI - Key Performance Indicator\n\n    /**\n     *\n     *\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Evidences\n     */\n    async specifyKPI(req, res) {\n\n        const datatypes = [\"table\", \"survey\", \"audio\", \"image\", \"video\"];\n\n        validate.validateAddEvidenceRequest(req, res)\n        const errors = req.validationErrors();\n\n        if (errors) {\n            return res.status(400).json({\n                message: errors\n            });\n        }\n\n        const { title, project, level, task, instruction,\n            quote, stakeholders, datatype, fields, dueDate, totalPrice\n        } = req.body;\n\n        try {\n            // confirm project\n            let foundProject = await Project.findById(project);\n            if (!foundProject || foundProject == null) {\n                return res.status(404).json({ message: \"Project Not Found\" })\n            }\n\n\n            let userAddedHimself = stakeholders.some(stakeholder => stakeholder === req.userId);\n\n            if (userAddedHimself) {\n                return res.status(403).json({ message: \"You cannot assign evidence request to yourself.\" })\n            }\n\n            const KPIObj = {\n                title,\n                project,\n                level,\n                instruction,\n                stakeholders: _.uniqBy(stakeholders.map(stakeholder => { return { user: stakeholder, quote: Number(quote) } }), 'user'),\n                totalPrice: totalPrice || quote * stakeholders.length,\n                datatype,\n                task,\n                requestedBy: req.userId,\n                dueDate\n            }\n\n            if (level === \"project\") {\n                delete KPIObj.task\n            } else if (level === \"task\" && (!task || task.length < 1)) {\n                return res.status(404).json({ message: \"Please Specify task\" })\n            }\n\n\n\n            let fieldObj;\n            let evidenceRequest;\n\n            switch (datatype) {\n                case datatypes[0]:\n                    if (!fields || !(fields instanceof Array) || (fields instanceof Array && fields.length < 1)) {\n                        return res.status(404).json({ message: \"Expects an array of objects for the table fields\" })\n                    }\n\n\n                    fieldObj = fields.map((field) => {\n                        return {\n                            title: field.title.replace(/^\\w/, c => c.toUpperCase()),\n                            responseType: field.responseType.replace(/^\\w/, c => c.toUpperCase())\n                        }\n                    });\n\n\n                    fieldObj.push({ title: 'Date' });\n\n                    KPIObj.fields = fieldObj;\n\n                    evidenceRequest = await new Evidence(KPIObj).save();\n                    return res.status(201).json({\n                        message: \"Key Performance Indicator successfully set\",\n                        evidenceRequest\n                    });\n\n                case datatypes[1]:\n                    if (!fields || !(fields instanceof Array) || (fields instanceof Array && fields.length < 1)) {\n                        return res.status(400).json({ message: \"Specify questions for the survey\" })\n                    }\n\n                    fieldObj = fields.map((field) => {\n                        return {\n                            title: field.replace(/^\\w/, c => c.toUpperCase())\n                        }\n                    });\n\n\n                    KPIObj.fields = fieldObj;\n                    evidenceRequest = await new Evidence(KPIObj).save();\n                    return res.status(201).json({\n                        message: \"Key Performance Indicator successfully set\",\n                        evidenceRequest\n                    });\n\n                default:\n\n                    delete KPIObj.fields;\n                    evidenceRequest = await new Evidence(KPIObj).save();\n                    return res.status(201).json({\n                        message: \"Key Performance Indicator successfully set\",\n                        evidenceRequest\n                    });\n            }\n\n        } catch (error) {\n            console.log(error);\n            return res.status(501).json({\n                message: error.message\n            });\n        }\n\n    }\n\n\n\n    /**\n     *\n     *\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Evidences\n     */\n\n    async submitEvidenceForEvidenceRequest(req, res) {\n        const { evidenceRequestId, file, fields } = req.body;\n        const datatypes = [\"table\", \"survey\", \"audio\", \"image\", \"video\"];\n\n        let evidenceObj = {};\n        let errors = [];\n\n        try {\n\n            let evidenceRequest = await Evidence.findOne({ _id: evidenceRequestId, 'stakeholders.user': req.userId });\n\n            if (!evidenceRequest) {\n                return res.status(404).json({ message: \"Request Not Found\" })\n            }\n\n\n            // check if the stakeholder has submitted before\n\n            let extractedStakeholder = evidenceRequest.stakeholders.find(stakeholder => stakeholder.user._id.toString() === req.userId)\n\n            // return res.json({extractedStakeholder});\n\n            if (extractedStakeholder === undefined || Object.getOwnPropertyNames(extractedStakeholder).length === 0) {\n                return res.status(403).json({ message: \"You were not assigned to this request\" })\n            } else if (Object.getOwnPropertyNames(extractedStakeholder).length > 0 && extractedStakeholder.hasSubmitted === true) {\n                return res.status(403).json({ message: \"You cannot submit more than one evidence for this request\" })\n            }\n\n            switch (evidenceRequest.datatype) {\n                // when evidence require table\n                case datatypes[0]:\n\n\n                    let evidencefields = evidenceRequest.fields\n                    // .filter(f=>f.title !='Date');\n\n                    if (!fields || !(fields instanceof Array) || (fields instanceof Array && fields.length < 1)) {\n                        return res.status(400).json({ message: \"Expects an array of objects with data related to the request\" })\n                    }\n\n                    let fieldsTitle = fields.map(f => f.title);\n                    let evidencefieldsTitle = evidencefields.map(f => f.title).filter(f => f !== 'Date');\n\n                    let fieldsNotInRequest = evidencefieldsTitle.filter(f => !fieldsTitle.includes(f))\n\n                    // make sure all fields are present.\n                    if (fieldsNotInRequest.length > 0) {\n                        fieldsNotInRequest.map((f) => {\n                            errors.push(`${f} cannot be empty`)\n                        })\n                    }\n\n                    // make sure all values are filled\n                    for (let data of fields) {\n                        if (!data.value || data.value.length == \"\") {\n                            errors.push(`${data.title} cannot be empty`)\n                            continue;\n                        }\n                    }\n\n\n                    if (errors.length > 0) {\n                        return res.status(400).json({ message: [...errors] })\n                    }\n\n                    // sort both fields and evidence in ASC order\n\n                    for (let field of evidencefields) {\n                        for (let data of fields) {\n\n                            // check both title are thesame\n                            if (field._id == data._id) {\n                                // check the response data of field\n                                // check if the valid response type is provided\n                                // cast data value to Number whose corresponding response type is 'Number'\n                                if (field.responseType == 'Number') {\n                                    if (isNaN(data.value)) {\n                                        errors.push(`Please provide a valid Number for ${data.title}`);\n                                        continue\n                                    } else {\n                                        data.value = Number(data.value);\n                                        evidenceObj[`${field.title}`] = data.value;\n                                        // evidenceObj.push({ title: data.title, value: data.value })\n\n                                    }\n                                } else {\n                                    // evidenceObj.push({ title: data.title, value: data.value })\n                                    evidenceObj[`${field.title}`] = data.value;\n\n                                }\n\n                            }\n                        }\n                    }\n\n\n                    if (errors.length > 0) {\n                        return res.status(400).json({ message: [...errors] })\n                    }\n\n\n                    // evidenceObj.push({ title: \"Date\", value: new Date() })\n                    evidenceObj['Date'] = new Date();\n                    evidenceObj['user'] = req.userId;\n                    // evidenceRequest.submissions = [{evidence:evidenceObj}];\n                    evidenceRequest.submissions.push(evidenceObj);\n\n                    evidenceRequest.stakeholders.length === evidenceRequest.submissions.length ? evidenceRequest.status = \"Completed\" :\n                        evidenceRequest.status = \"In Progess\";\n                    // evidenceRequest.status = \"Submitted\"\n\n                    // return res.json(evidenceRequest);\n                    await evidenceRequest.save();\n\n                    await Evidence.updateOne({ _id: evidenceRequestId, 'stakeholders.user': req.userId },\n                        { $set: { 'stakeholders.$.hasSubmitted': true } });\n\n                    return res.status(200).json({ message: \"Your Evidence has been submitted\" });\n\n                // when evidence require survey\n                case datatypes[1]:\n\n                    return res.status(200).json({ message: \"This feature is not available yet for survey format\" })\n\n                default:\n                    // when evidence require audio, video or image\n                    if (!file || file.length < 1) {\n                        return res.status(400).json({ message: \"Please submit evidence\" })\n                    }\n\n                    const field = {}\n\n                    field[`${evidenceRequest.datatype}`] = file\n                    field[`evidence`] = file\n\n                    evidenceRequest.submissions.push(field);\n                    evidenceRequest.status = \"Submitted\"\n\n                    // return res.json(evidenceRequest);\n                    await evidenceRequest.save();\n\n                    return res.status(200).json({ message: \"Your Evidence has been submitted\" });\n\n            }\n\n        } catch (error) {\n            console.log(error);\n            return res.status(501).json({\n                message: error.message\n            });\n        }\n\n    }\n\n\n\n    /**\n     *\n     *\n     * @param {*} req\n     * @param {*} res\n     * @memberof Evidences\n     */\n    async getProjectEvidenceRequests(req, res) {\n        const { id } = req.params;\n\n        try {\n            let evidenceRequests = await Evidence.find({ project: id, $or: [{ requestedBy: req.userId }, { 'stakeholders.user': req.userId }] }).sort({ createdAt: -1 });\n\n            if (evidenceRequests.length < 1) {\n                return res.status(200).json({ evidenceRequests: [] });\n            }\n\n            evidenceRequests = evidenceRequests.map((evidenceRequest) => {\n                return {\n                    _id: evidenceRequest._id,\n                    title: evidenceRequest.title,\n                    project: evidenceRequest.project,\n                    level: evidenceRequest.level,\n                    instruction: evidenceRequest.instruction,\n                    stakeholders: evidenceRequest.stakeholders.map(stakeholder => {\n                        return {\n                            hasSubmitted: stakeholder.hasSubmitted,\n                            quote: stakeholder.quote,\n                            user: Evidences.populateUser(stakeholder.user)\n                        }\n                    }),\n                    // quote: evidenceRequest.quote,\n                    datatype: evidenceRequest.datatype,\n                    task: Evidences.populateTask(evidenceRequest.task),\n                    requestedBy: Evidences.populateUser(evidenceRequest.requestedBy),\n                    dueDate: evidenceRequest.dueDate,\n                    status: evidenceRequest.status,\n                    fields: evidenceRequest.fields,\n                    submissions: Evidences.filterSubmissions(req.userId, evidenceRequest.submissions, evidenceRequest.stakeholders, evidenceRequest.requestedBy),\n                    totalPrice: evidenceRequest.totalPrice\n                }\n            })\n            return res.status(200).json({ evidenceRequests });\n        } catch (error) {\n\n            console.log(error);\n            return res.status(501).json({\n                message: error.message\n            });\n        }\n    }\n\n\n    /**\n     *\n     *\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Evidences\n     */\n    async getSingleEvidenceRequest(req, res) {\n        const { id } = req.params;\n        try {\n            let evidenceRequest = await Evidence.findOne({ _id: id });\n\n            if (!evidenceRequest) {\n                return res.status(404).json({ message: \"Request Not Found\" })\n            }\n\n            evidenceRequest = {\n                title: evidenceRequest.title,\n                project: evidenceRequest.project,\n                level: evidenceRequest.level,\n                instruction: evidenceRequest.instruction,\n                stakeholders: evidenceRequest.stakeholders.map(stakeholder => {\n                    return {\n                        hasSubmitted: stakeholder.hasSubmitted,\n                        quote: stakeholder.quote,\n                        user: Evidences.populateUser(stakeholder.user)\n                    }\n                }),\n                quote: evidenceRequest.quote,\n                datatype: evidenceRequest.datatype,\n                task: Evidences.populateTask(evidenceRequest.task),\n                requestedBy: Evidences.populateUser(evidenceRequest.requestedBy),\n                dueDate: evidenceRequest.dueDate,\n                status: evidenceRequest.status,\n                fields: evidenceRequest.fields,\n                submissions: Evidences.filterSubmissions(req.userId, evidenceRequest.submissions, evidenceRequest.stakeholders, evidenceRequest.requestedBy),\n                totalPrice: evidenceRequest.totalPrice\n\n            }\n\n            return res.status(200).json({ evidenceRequest });\n\n        } catch (error) {\n            console.log(error);\n            return res.status(501).json({\n                message: error.message\n            });\n        }\n    }\n\n    async submitEvidenceGeneral(req, res) {\n        const { project, level, task,\n            note, evidence\n        } = req.body;\n\n        let errors = [];\n\n        const submissionObj = {\n            project, level, task, stakeholder: req.userId, evidence\n        }\n\n\n        try {\n            // confirm project\n            let foundProject = await Project.findById(project);\n            if (!foundProject || foundProject == null) {\n                return res.status(404).json({ message: \"Project Not Found\" })\n            }\n\n            // ................features....................\n            // 1. check if he is assigned to the proposal (for a contractor)\n            // 2. check role\n\n\n            let projectStakeholders = foundProject.stakeholders;\n\n            let isProjectStakeholder = projectStakeholders.some(s => s.user.information._id.toString() === req.userId && s.user.status === 'ACCEPTED')\n\n            if (!isProjectStakeholder) {\n                return res.status(403).json({ message: \"You are not a stakeholder on this project.\" })\n            }\n\n            // make sure he is part of stakeholders\n\n            if (level === \"project\") {\n                delete submissionObj.task\n            } else if (level === \"task\" && (!task || task.length < 1)) {\n                // errors.push(\"Please Specify task\")\n                return res.status(400).json({ message: \"Please Specify task\" })\n                // confirm task if task\n            } else if (level === \"task\" && (task || task.length > 0)) {\n                let foundTask = await Task.findById(task);\n                if (!foundTask || foundTask == null) {\n                    return res.status(404).json({ message: \"Task Not Found.\" })\n\n                }\n            }\n\n            if (note && note.length > 0) {\n                submissionObj.note = note;\n            }\n\n            // return res.json({submissionObj});\n\n            let submission = await new Submission(submissionObj).save();\n\n            if (submission) {\n                return res.status(201).json({ message: \"Your evidence has been uploaded\" });\n            }\n\n\n        } catch (error) {\n            console.log(error);\n            return res.status(501).json({\n                message: error.message\n            });\n        }\n\n\n    }\n\n    async getSubmissions(req, res) {\n        const { id } = req.params;\n        const { proposalId } = req.query;\n        let generalSubmissions;\n        try {\n\n            // confirm project \n            let project = await Project.findById(id);\n            if (!project) {\n                return res.status(404).json({ message: \"Project Not Found\" })\n            }\n\n\n            if (project.owner._id.toString() === req.userId) {\n                generalSubmissions = await Submission.find({ project: id });\n            } else {\n                generalSubmissions = await Submission.find({ project: id, stakeholder: req.userId });\n            }\n\n\n            let evidenceRequestSubmissions = await Evidence.find({ project, $or: [{ requestedBy: req.userId }, { 'stakeholders.user': req.userId }], submissions: { $exists: true }, $where: 'this.submissions.length>0' });\n\n            // get proposal related to the project\n\n            let proposal\n            if(proposalId && proposalId.length>0){\n                 proposal = await Proposal.findOne({ _id: proposalId, $or: [{ proposedBy: req.userId }, { assignedTo: req.userId }] }, { \"comments\": 0, \"proposalName\": 0, \"approved\": 0, \"status\": 0 });\n            }\n\n            if(!proposal){\n                return res.status(404).json({ message: \"Proposal Not Found\" })\n            }\n\n\n            let projectLevelSubmissions = Evidences.filterProjectLevelSubmission(generalSubmissions, evidenceRequestSubmissions)\n            // let taskSubmissions = Evidences.filterTaskLevelSubmission(generalSubmissions, evidenceRequestSubmissions)\n\n            let submissions = {\n                projectLevelSubmissions,\n                taskLevelSubmissions: proposal.milestones.map((milestone) => {\n                    return {\n                        title: milestone.title,\n                        tasks: milestone.tasks.map((task) => {\n                            return Evidences.filterTaskLevelSubmission(req.userId,task, generalSubmissions, evidenceRequestSubmissions)\n                        })\n                    }\n                })\n            }\n\n            // let allTaskSubmissions = Array.prototype.concat.call([], generalSubmissions, evidenceRequestSubmissions).filter(submission => submission.level === 'task');\n\n            // let submissions= {}\n            return res.json( submissions )\n\n        } catch (error) {\n            console.log(error);\n            return res.status(501).json({\n                message: error.message\n            });\n        }\n    }\n\n\n}\n\nmodule.exports = { Evidences }"]}