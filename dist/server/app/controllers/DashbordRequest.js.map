{"version":3,"sources":["../../../../app/controllers/DashbordRequest.js"],"names":["require","config","mongoose","User","model","Project","Save","Dashboard","savedProjects","createdProjects","joinedProjects","areaOfInterest","result","fundedProjects","fetchSavedProject","bind","fetchCreatedProjects","getAll","fetchJoinedProjects","fetchAreaOfInterestP","req","res","page","query","limit","all","find","user","userId","projects","length","map","p","_id","project","name","status","goal","location","avatar","owner","fullName","firstName","lastName","reverse","docs","paginate","Number","d","total","pages","console","log","json","message","roles","includes","findById","interests","areasOfInterest","$ne","tags","$in","cat","module","exports"],"mappings":"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","file":"DashbordRequest.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nconst mongoose = require(\"mongoose\");\nconst User = mongoose.model(\"User\"),\n    Project = mongoose.model('Project'),\n    Save = mongoose.model('Save');\n\n\n\nclass Dashboard {\n    constructor() {\n        this.savedProjects = {};\n        this.createdProjects = {};\n        this.joinedProjects = {};\n        this.areaOfInterest = {};\n        this.result = {};\n        this.fundedProjects = {};\n\n\n        this.fetchSavedProject = this.fetchSavedProject.bind(this);\n        this.fetchCreatedProjects = this.fetchCreatedProjects.bind(this);\n        this.getAll = this.getAll.bind(this);\n        this.fetchJoinedProjects = this.fetchJoinedProjects.bind(this);\n        this.fetchAreaOfInterestP = this.fetchAreaOfInterestP.bind(this);\n\n    }\n\n\n    /**\n     *\n     *\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Dashboard\n     */\n    async fetchSavedProject(req, res) {\n        let page = req.query.page || 1;\n        let limit = req.query.limit || 20;\n        let all = req.query.all;\n        try {\n            if (all && typeof (all) === 'string' && all === 'true') {\n                let projects = await Save.find({ user: req.userId });\n                if (projects.length > 0) {\n                    projects = projects.map((p) => {\n                        return {\n                            _id: p.project._id,\n                            name: p.project.name,\n                            status:p.project.status,\n                            goal:p.project.goal,\n                            location:{\n                                name:p.project.location.name\n                            },\n                            avatar: p.project[\"project-avatar\"],\n                            owner: {\n                                fullName: `${p.project.owner.firstName} ${p.project.owner.lastName}`,\n                                _id: p.project.owner._id\n                            }\n                        }\n                    }).reverse();\n                }\n\n                this.savedProjects = {\n                    docs: projects,\n                };\n                return this.savedProjects;\n            }\n\n            let projects = await Save.paginate({ user: req.userId }, { page: Number(page), limit: Number(limit) });\n            let docs = projects.docs;\n            if (docs.length > 0) {\n                docs = docs.map((d) => {\n                    return {\n                        _id: d.project._id,\n                        name: d.project.name,\n                        status:d.project.status,\n                        goal:d.project.goal,\n                        location:{\n                            name:d.project.location.name\n                        },\n                        avatar: d.project[\"project-avatar\"],\n                        owner: {\n                            fullName: `${d.project.owner.firstName} ${d.project.owner.lastName}`,\n                            _id: d.project.owner._id\n                        }\n                    }\n                }).reverse();\n            }\n\n            this.savedProjects = {\n                docs,\n                total: projects.total,\n                limit: projects.limit,\n                page: projects.page,\n                pages: projects.pages\n            };\n            return this.savedProjects;\n\n        } catch (error) {\n            console.log(error)\n            return res.status(500).json({ message: \"internal server error\" })\n        }\n    }\n\n    /**\n     *\n     *\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Dashboard\n     */\n    async fetchCreatedProjects(req, res) {\n        let page = req.query.page || 1;\n        let limit = req.query.limit || 20;\n        let all = req.query.all;\n\n        try {\n\n            if (req.roles.includes('isFunder') || req.roles.includes('isContractor')) {\n\n                if (all && typeof (all) === 'string' && all === 'true') {\n                    let projects = await Project.find({ owner: req.userId });\n                    if (projects.length > 0) {\n                        projects = projects.map((p) => {\n                            return {\n                                _id: p._id,\n                                name: p.name,\n                                status:p.status,\n                                goal:p.goal,\n                                location:{\n                                    name:p.location.name\n                                },\n                                avatar: p[\"project-avatar\"],\n                                owner: {\n                                    fullName: `${p.owner.firstName} ${p.owner.lastName}`,\n                                    _id: p.owner._id\n                                }\n                            }\n                        }).reverse();\n                    }\n\n                    this.createdProjects = {\n                        docs: projects,\n                    };\n                    return this.createdProjects;\n                }\n\n                let projects = await Project.paginate({ owner: req.userId }, { page: Number(page), limit: Number(limit) });\n                let docs = projects.docs;\n                if (docs.length > 0) {\n                    docs = docs.map((d) => {\n                        return {\n                            _id: d._id,\n                            name: d.name,\n                            status:d.status,\n                            goal:d.goal,\n                            location:{\n                                name:d.location.name\n                            },\n                            avatar: d[\"project-avatar\"],\n                            owner: {\n                                fullName: `${d.owner.firstName} ${d.owner.lastName}`,\n                                _id: d.owner._id\n                            }\n                        }\n                    }).reverse();\n                }\n\n                this.createdProjects = {\n                    docs,\n                    total: projects.total,\n                    limit: projects.limit,\n                    page: projects.page,\n                    pages: projects.pages\n                };\n                return this.createdProjects;\n            }\n            return this.createdProjects;\n        } catch (error) {\n            console.log(error)\n            return res.status(500).json({ message: \"internal server error\" })\n        }\n    }\n\n    /**\n     *\n     *\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Dashboard\n     */\n    async fetchJoinedProjects(req, res) {\n        let page = req.query.page || 1;\n        let limit = req.query.limit || 20;\n\n        let all = req.query.all;\n        try {\n\n            if (all && typeof (all) === 'string' && all === 'true') {\n\n                let projects = await Project.find({\n                    'stakeholders.user.information': req.userId,\n                    'stakeholders.user.status': 'ACCEPTED', 'stakeholders.user.agreed': true\n                });\n\n                if (projects.length > 0) {\n                    projects = projects.map((p) => {\n                        return {\n                            _id: p._id,\n                            name: p.name,\n                            status:p.status,\n                            goal:p.goal,\n                            location:{\n                                name:p.location.name\n                            },\n                            avatar: p[\"project-avatar\"],\n                            owner: {\n                                fullName: `${p.owner.firstName} ${p.owner.lastName}`,\n                                _id: p.owner._id\n                            }\n                        }\n                    }).reverse();\n                }\n\n\n                if (req.roles.includes('isContractor') || req.roles.includes('isEvaluator')) {\n                    this.joinedProjects = {\n                        docs: projects,\n                    };\n                    return { joinedProjects: this.joinedProjects };;\n\n                }\n                else if (req.roles.includes('isFunder')) {\n                    this.fundedProjects = {\n                        docs: projects,\n\n                    };\n                    return { fundedProjects: this.fundedProjects };\n                }\n            }\n\n            //fetch paginated projects here\n            let projects = await Project.paginate({\n                'stakeholders.user.information': req.userId,\n                'stakeholders.user.status': 'ACCEPTED', 'stakeholders.user.agreed': true\n            }, { page: Number(page), limit: Number(limit) });\n\n            let docs = projects.docs;\n            if (docs.length > 0) {\n                docs = docs.map((d) => {\n                    return {\n                        _id: d._id,\n                        name: d.name,\n                        status:d.status,\n                        goal:d.goal,\n                        location:{\n                            name:d.location.name\n                        },\n                        avatar: d[\"project-avatar\"],\n                        owner: {\n                            fullName: `${d.owner.firstName} ${d.owner.lastName}`,\n                            _id: d.owner._id\n                        }\n                    }\n                }).reverse();\n\n            }\n\n\n\n            if (req.roles.includes('isContractor') || req.roles.includes('isEvaluator')) {\n                this.joinedProjects = {\n                    docs,\n                    total: projects.total,\n                    limit: projects.limit,\n                    page: projects.page,\n                    pages: projects.pages\n                };\n                return { joinedProjects: this.joinedProjects };;\n\n            }\n            else if (req.roles.includes('isFunder')) {\n                this.fundedProjects = {\n                    docs,\n                    total: projects.total,\n                    limit: projects.limit,\n                    page: projects.page,\n                    pages: projects.pages\n                };\n                return { fundedProjects: this.fundedProjects };\n            }\n        } catch (error) {\n            console.log(error)\n            return res.status(500).json({ message: \"internal server error\" })\n        }\n    }\n\n\n    /**\n     *\n     *\n     * @param {*} req\n     * @param {*} res\n     * @memberof Dashboard\n     */\n    async fetchAreaOfInterestP(req, res) {\n        let page = req.query.page || 1;\n        let limit = req.query.limit || 20;\n        let all = req.query.all;\n        // let interests = req.decodedTokenData.areasOfInterest;\n\n        try {\n\n            let user = await User.findById(req.userId);\n\n            let interests = user.areasOfInterest;\n\n            if (all && typeof (all) === 'string' && all === 'true') {\n                let projects = await Project.find({ owner: { $ne: req.userId }, tags: { $in: [...interests] } });\n                if (projects.length > 0) {\n                    // projects= projects.filter(p=>p.owner._id.toString() !== req.userId);\n                    projects = projects.map((p) => {\n                        return {\n                            _id: p._id,\n                            name: p.name,\n                            status:p.status,\n                            goal:p.goal,\n                            location:{\n                                name:p.location.name\n                            },\n                            avatar: p[\"project-avatar\"],\n                            owner: {\n                                fullName: `${p.owner.firstName} ${p.owner.lastName}`,\n                                _id: p.owner._id\n                            }\n                        }\n                    }).reverse();\n                }\n\n                this.areaOfInterest = {\n                    docs: projects,\n                };\n                return this.areaOfInterest;\n            }\n\n            let projects = await Project.paginate({ owner: { $ne: req.userId }, tags: { $in: [...interests] } }, { page: Number(page), limit: Number(limit) });\n            let docs = projects.docs;\n            if (docs.length > 0) {\n                // docs= docs.filter(d=>d.owner._id.toString() !== req.userId);\n                docs = docs.map((d) => {\n                    return {\n                        _id: d._id,\n                        name: d.name,\n                        status:d.status,\n                        goal:d.goal,\n                        location:{\n                            name:d.location.name\n                        },\n                        avatar: d[\"project-avatar\"],\n                        owner: {\n                            fullName: `${d.owner.firstName} ${d.owner.lastName}`,\n                            _id: d.owner._id\n                        }\n                    }\n                }).reverse();\n            }\n\n            this.areaOfInterest = {\n                docs,\n                total: projects.total,\n                limit: projects.limit,\n                page: projects.page,\n                pages: projects.pages\n            };\n            return this.areaOfInterest;\n\n        } catch (error) {\n            console.log(error)\n            return res.status(500).json({ message: \"internal server error\" })\n        }\n    }\n\n\n    /**\n     *\n     *\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Dashboard\n     */\n    async getAll(req, res) {\n\n        let createdProjects = await this.fetchCreatedProjects(req, res);\n        let savedProjects = await this.fetchSavedProject(req, res);\n\n        let joinedProjects = await this.fetchJoinedProjects(req, res);\n        let areasOfInterest = await this.fetchAreaOfInterestP(req, res);\n\n        return this.result = { createdProjects, savedProjects, ...joinedProjects, areasOfInterest };\n\n\n    }\n\n\n    /**\n     *\n     *\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Dashboard\n     */\n    async handleRequest(req, res) {\n        let cat = req.query.cat;\n        switch (cat) {\n            case 'a':\n                let result = await new Dashboard().getAll(req, res)\n                return res.status(200).json({ result });\n            case 's':\n                let savedProjects = await new Dashboard().fetchSavedProject(req, res);\n                return res.status(200).json({ result: { savedProjects: savedProjects } });\n\n            case 'c':\n                let createdProjects = await new Dashboard().fetchCreatedProjects(req, res);\n                return res.status(200).json({ result: { createdProjects: createdProjects } });\n\n            case 'j':\n                let joinedProjects = await new Dashboard().fetchJoinedProjects(req, res);\n                return res.status(200).json({ result: joinedProjects });\n\n            case 'i':\n                let areasOfInterest = await new Dashboard().fetchAreaOfInterestP(req, res);\n                return res.status(200).json({ result: { areasOfInterest: areasOfInterest } })\n\n            default:\n                break;\n        }\n\n\n    }\n\n}\n\nmodule.exports = new Dashboard();"]}