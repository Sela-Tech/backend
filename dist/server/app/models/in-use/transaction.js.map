{"version":3,"sources":["../../../../../app/models/in-use/transaction.js"],"names":["moment","require","mongoose","Schema","ObjectId","Types","mongoosePaginate","transactionStructure","hash","type","String","required","max","project","ref","currency","sender","receiver","value","Number","memo","status","enum","default","createdOn","Date","now","updatedOn","schemaOptions","collection","minimize","id","toJSON","getters","virtuals","versionKey","retainKeyOrder","toObject","autoIndex","process","env","NODE_ENV","strict","test","Boolean","TransactionSchema","pre","next","done","update","$set","plugin","module","exports","model"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,WAAWD,QAAQ,UAAR,CAAf;AACA,IAAIE,SAASD,SAASC,MAAtB;AACA,IAAIC,WAAWD,OAAOE,KAAP,CAAaD,QAA5B;;AAEA,IAAME,mBAAiBL,QAAQ,mBAAR,CAAvB;;AAEA,IAAIM,uBAAuB;AACzBC,QAAM;AACJC,UAAMC,MADF;AAEJC,cAAU,IAFN;AAGJC,SAAK;AAHD,GADmB;AAMzBC,WAAS;AACPJ,UAAML,QADC;AAEPU,SAAK,SAFE;AAGPH,cAAU;AAHH,GANgB;AAWzBI,YAAU;AACRN,UAAMC,MADE;AAERC,cAAU;AAFF,GAXe;AAezBK,UAAQ;AACNP,UAAMC,MADA;AAENC,cAAU;AAFJ,GAfiB;AAmBzBM,YAAU;AACRR,UAAMC,MADE;AAERC,cAAU;AAFF,GAnBe;AAuBzBO,SAAO;AACLT,UAAMU,MADD;AAELR,cAAU;AAFL,GAvBkB;AA2BzBS,QAAM;AACJX,UAAMC;AADF,GA3BmB;;AA+BzBW,UAAQ;AACNZ,UAAMC,MADA;AAENY,UAAM,CAAC,SAAD,EAAY,WAAZ,CAFA;AAGNC,aAAS;AAHH,GA/BiB;AAoCzBC,aAAW;AACTf,UAAMgB,IADG;AAETF,aAASE,KAAKC,GAAL;AAFA,GApCc;AAwCzBC,aAAW;AACTlB,UAAMgB,IADG;AAETF,aAASE,KAAKC,GAAL;AAFA;AAxCc,CAA3B;;AA8CA,IAAIE,gBAAgB;AAClBC,cAAY,cADM;AAElBC,YAAU,KAFQ;AAGlBC,MAAI,KAHc;AAIlBC,UAAQ;AACNC,aAAS,IADH;AAENC,cAAU,IAFJ;AAGNJ,cAAU,KAHJ;AAINK,gBAAY,KAJN;AAKNC,oBAAgB;AALV,GAJU;AAWlBC,YAAU;AACRJ,aAAS,IADD;AAERC,cAAU,IAFF;AAGRJ,cAAU,KAHF;AAIRK,gBAAY,KAJJ;AAKRC,oBAAgB;AALR,GAXQ;AAkBlBE,aAAWC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAlBlB;AAmBlBC,UAAQH,QAAQC,GAAR,CAAYC,QAAZ,KAAyB;AAnBf,CAApB;;AAsBA,IAAIF,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1ClC,uBAAqBoC,IAArB,GAA4B;AAC1BlC,UAAMmC,OADoB;AAE1BrB,aAAS;AAFiB,GAA5B;AAID;;AAID,IAAIsB,oBAAoB,IAAI1C,MAAJ,CAAWI,oBAAX,EAAiCqB,aAAjC,CAAxB;;AAEAiB,kBAAkBC,GAAlB,CAAsB,MAAtB,EAA8B,IAA9B,EAAoC,UAASC,IAAT,EAAeC,IAAf,EAAqB;AACvDD;;AAEA,OAAKpB,SAAL,GAAiB,IAAIF,IAAJ,EAAjB;;AAEAuB;AACD,CAND;;AAQAH,kBAAkBC,GAAlB,CAAsB,QAAtB,EAAgC,IAAhC,EAAsC,UAASC,IAAT,EAAeC,IAAf,EAAqB;AACzDD;;AAEA,OAAKE,MAAL,CACE,EADF,EAEE;AACEC,UAAM;AACJvB,iBAAW,IAAIF,IAAJ;AADP;AADR,GAFF;;AASAuB;AACD,CAbD;;AAeA;AACA;;;;;;;;AAQAH,kBAAkBM,MAAlB,CAAyB7C,gBAAzB;AACA8C,OAAOC,OAAP,GAAiBnD,SAASoD,KAAT,CAAe,aAAf,EAA8BT,iBAA9B,CAAjB","file":"transaction.js","sourcesContent":["var moment = require(\"moment\");\nvar mongoose = require(\"mongoose\");\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.Types.ObjectId;\n\nconst mongoosePaginate=require('mongoose-paginate'); \n\nvar transactionStructure = {\n  hash: {\n    type: String,\n    required: true,\n    max: 1000\n  },\n  project: {\n    type: ObjectId,\n    ref: \"Project\",\n    required: true\n  },\n  currency: {\n    type: String,\n    required: true\n  },\n  sender: {\n    type: String,\n    required: true\n  },\n  receiver: {\n    type: String,\n    required: true\n  },\n  value: {\n    type: Number,\n    required: true\n  },\n  memo: {\n    type: String\n  },\n\n  status: {\n    type: String,\n    enum: [\"PENDING\", \"CONFIRMED\"],\n    default: \"PENDING\"\n  },\n  createdOn: {\n    type: Date,\n    default: Date.now()\n  },\n  updatedOn: {\n    type: Date,\n    default: Date.now()\n  }\n};\n\nvar schemaOptions = {\n  collection: \"transactions\",\n  minimize: false,\n  id: false,\n  toJSON: {\n    getters: true,\n    virtuals: true,\n    minimize: false,\n    versionKey: false,\n    retainKeyOrder: true\n  },\n  toObject: {\n    getters: true,\n    virtuals: true,\n    minimize: false,\n    versionKey: false,\n    retainKeyOrder: true\n  },\n  autoIndex: process.env.NODE_ENV === \"development\",\n  strict: process.env.NODE_ENV !== \"development\"\n};\n\nif (process.env.NODE_ENV === \"development\") {\n  transactionStructure.test = {\n    type: Boolean,\n    default: true\n  };\n}\n\n\n\nvar TransactionSchema = new Schema(transactionStructure, schemaOptions);\n\nTransactionSchema.pre(\"save\", true, function(next, done) {\n  next();\n\n  this.updatedOn = new Date();\n\n  done();\n});\n\nTransactionSchema.pre(\"update\", true, function(next, done) {\n  next();\n\n  this.update(\n    {},\n    {\n      $set: {\n        updatedOn: new Date()\n      }\n    }\n  );\n\n  done();\n});\n\n//Export model\n/*module.exports = function(connection) {\n\n    if (!connection) {\n        connection = mongoose;\n    }\n    connection.model('Transaction', TransactionSchema);\n};*/\n\nTransactionSchema.plugin(mongoosePaginate);\nmodule.exports = mongoose.model(\"Transaction\", TransactionSchema);\n"]}