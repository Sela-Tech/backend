{"version":3,"sources":["../../../test/organization.js"],"names":["chai","require","chaiHttp","supertest","app","insertUserSeed","valideOrganization","generateToken","mongoose","User","model","Organization","expect","request","token","user","use","describe","before","after","remove","it","done","post","set","authorization","send","end","err","res","body","message","to","equal","get","length"],"mappings":";;;;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,WAAWD,QAAQ,WAAR,CAAjB;AACA,IAAOE,YAAYF,QAAQ,WAAR,CAAnB;AACA,IAAOG,MAAKH,QAAQ,aAAR,CAAZ;;eAEYA,QAAQ,oBAAR,C;IADJI,c,YAAAA,c;IAAeC,kB,YAAAA,kB;IAAoBC,a,YAAAA,a;;AAE3C,IAAMC,WAAWP,QAAQ,UAAR,CAAjB;AACA,IAAMQ,OAAOD,SAASE,KAAT,CAAe,MAAf,CAAb;AACA,IAAMC,eAAeH,SAASE,KAAT,CAAe,cAAf,CAArB;;AAIA,IAAME,SAASZ,KAAKY,MAApB;AACA,IAAMC,UAAUV,UAAUC,GAAV,CAAhB;AACA,IAAIU,QAAM,EAAV;AACA,IAAIC,OAAM,EAAV;AACAf,KAAKgB,GAAL,CAASd,QAAT;;AAGAe,SAAS,yBAAT,EAAoC,YAAM;AAC1CC,iEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGUb,gBAHV;;AAAA;AAGJU,gBAHI;;;AAKL;AACCD,oBAAOP,cAAcQ,IAAd,CAAP;;AANI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;;AAWAI,gEAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACEV,KAAKW,MAAL,CAAY,EAAZ,CADF;;AAAA;AAAA;AAAA,mBAEET,aAAaS,MAAb,CAAoB,EAApB,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;;AAKEH,WAAS,kCAAT,EAA6C,YAAM;AACjDI,OAAG,sEAAH,EAA2E,UAACC,IAAD,EAAU;AACnFT,cACGU,IADH,CACQ,gBADR,EAEGC,GAFH,CAEO,EAACC,eAAcX,KAAf,EAFP,EAGGY,IAHH,CAGQpB,kBAHR,EAIGM,MAJH,CAIU,GAJV,EAKGe,GALH,CAKO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAID,GAAJ,EAAS,OAAON,KAAKM,GAAL,CAAP;AACThB,eAAOiB,IAAIC,IAAJ,CAASC,OAAhB,EAAyBC,EAAzB,CAA4BC,KAA5B,CAAkC,mCAAlC;AACAX;AACD,OATH;AAUD,KAXD;AAYAD,OAAG,oEAAH,EAAyE,UAACC,IAAD,EAAU;AAC/ET,cACGU,IADH,CACQ,gBADR,EAEGC,GAFH,CAEO,EAACC,eAAc,EAAf,EAFP,EAGGC,IAHH,CAGQpB,kBAHR,EAIGM,MAJH,CAIU,GAJV,EAKGe,GALH,CAKO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAID,GAAJ,EAAS,OAAON,KAAKM,GAAL,CAAP;AACThB,eAAOiB,IAAIC,IAAJ,CAASC,OAAhB,EAAyBC,EAAzB,CAA4BC,KAA5B,CAAkC,sBAAlC;AACAX;AACD,OATH;AAUD,KAXH;AAYD,GAzBD;;AA4BAL,WAAS,6BAAT,EAAwC,YAAM;AAC5CI,OAAG,uCAAH,EAA4C,UAACC,IAAD,EAAU;AACpDT,cACGqB,GADH,CACO,gBADP,EAEGV,GAFH,CAEO,EAACC,eAAcX,KAAf,EAFP,EAGGF,MAHH,CAGU,GAHV,EAIGe,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAID,GAAJ,EAAS,OAAON,KAAKM,GAAL,CAAP;AACThB,eAAOiB,IAAIC,IAAJ,CAASK,MAAhB,EAAwBH,EAAxB,CAA2BC,KAA3B,CAAiC,CAAjC;AACAX;AACD,OARH;AASD,KAVD;AAYD,GAbD;AAgBD,CA7DD","file":"organization.js","sourcesContent":["const chai = require('chai');\nconst chaiHttp = require('chai-http');\nconst  supertest = require('supertest');\nconst  app =require('../sela_app');\nconst { insertUserSeed,valideOrganization, generateToken\n        } = require('./helpers/mockData')\nconst mongoose = require(\"mongoose\");\nconst User = mongoose.model(\"User\");\nconst Organization = mongoose.model('Organization');\n\n\n\nconst expect = chai.expect;\nconst request = supertest(app);\nlet token='';\nlet user ='';\nchai.use(chaiHttp);\n\n\ndescribe('organization controller', () => {\nbefore(async() => {\n\n  // seed a user into the db collection\n   user =  await insertUserSeed();\n\n  //  generatee token for the seeded user\n   token= generateToken(user);\n\n\n});\n\nafter(async ()=>{\n  await User.remove({});\n  await Organization.remove({});\n})\n\n  describe('Add Organization: /organizations', () => {\n    it('should successfully add a new organization by the authenticated user', (done) => {\n      request\n        .post('/organizations')\n        .set({authorization:token})\n        .send(valideOrganization)\n        .expect(200)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.message).to.equal(\"Organization Created Successfully\");\n          done();\n        });\n    });\n    it('should not add a new organization if the user is not authenticated', (done) => {\n        request\n          .post('/organizations')\n          .set({authorization:\"\"})\n          .send(valideOrganization)\n          .expect(400)\n          .end((err, res) => {\n            if (err) return done(err);\n            expect(res.body.message).to.equal(\"jwt must be provided\");\n            done();\n          });\n      });\n  });\n\n\n  describe('Stakeholder: /organizations', () => {\n    it('should successfully get organizations', (done) => {\n      request\n        .get('/organizations')\n        .set({authorization:token})\n        .expect(200)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.length).to.equal(2);\n          done();\n        });\n    });\n\n  });\n\n\n});\n"]}