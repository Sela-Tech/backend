{"version":3,"sources":["../../../../app/helper/helper.js"],"names":["sgMail","require","config","mongoose","User","model","AWS","accessKeyId","process","env","AWSaccessKeyId","secretAccessKey","AWSsecretAccessKey","region","s3","S3","setApiKey","SEND_GRID_API","Helper","data","roles","userRole","Array","user","isFunder","isContractor","isEvaluator","role","Object","keys","filter","k","find","r","includes","findByIdAndUpdate","userId","socket","socketId","console","log","object","params","Bucket","Delete","Objects","Key","deleteObjects","err","stack","stakeHolders","pStakeholder","MAX_CONTRACTOR_ALLOWED","_id","users","newContractorsCount","u","length","pContractorCount","s","information","module","exports"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAASC,QAAQ,gBAAR,CAAf;AACA;AACAA,QAAQ,QAAR,EAAkBC,MAAlB;AACA,IAAMC,WAAWF,QAAQ,UAAR,CAAjB;AAAA,IACIG,OAAOD,SAASE,KAAT,CAAe,MAAf,CADX;AAEA,IAAMC,MAAML,QAAQ,SAAR,CAAZ;;AAEAK,IAAIJ,MAAJ,GAAa;AACTK,iBAAaC,QAAQC,GAAR,CAAYC,cADhB;AAETC,qBAAiBH,QAAQC,GAAR,CAAYG,kBAFpB;AAGTC,YAAQ;AAHC,CAAb;;AAMA,IAAIC,KAAK,IAAIR,IAAIS,EAAR,CAAW,EAAX,CAAT;;AAEAf,OAAOgB,SAAP,CAAiBR,QAAQC,GAAR,CAAYQ,aAA7B;;AAGA;;;;;;IAKMC,M;;;;;;;;;AAEF;;;;;;;;;gCASQC,I,EAAM;AACV,gBAAMC,QAAO,CAAC,QAAD,EAAW,YAAX,EAAyB,WAAzB,CAAb;AACA,gBAAIC,iBAAJ;;AAEA,gBAAG,EAAEF,gBAAgBG,KAAlB,CAAH,EAA4B;AACxB,oBAAIC,OAAM;AACNC,8BAASL,KAAKK,QADR;AAENC,kCAAaN,KAAKM,YAFZ;AAGNC,iCAAaP,KAAKO;AAHZ,iBAAV;;AAMA,oBAAIC,OAAOC,OAAOC,IAAP,CAAYN,IAAZ,EAAkBO,MAAlB,CAAyB;AAAA,2BAAKP,KAAKQ,CAAL,MAAY,IAAjB;AAAA,iBAAzB,CAAX;;AAEAV,2BAAWD,MAAMY,IAAN,CAAW,UAACC,CAAD,EAAK;AACvB,2BAAOA,IAAIN,KAAK,CAAL,EAAQO,QAAR,CAAiBD,CAAjB,CAAX;AACH,iBAFU,CAAX;;AAIA,uBAAOZ,QAAP;AAEH,aAfD,MAeK;AACDA,2BAAWD,MAAMY,IAAN,CAAW,UAACC,CAAD,EAAK;AACvB,2BAAOA,IAAId,KAAK,CAAL,EAAQe,QAAR,CAAiBD,CAAjB,CAAX;AACH,iBAFU,CAAX;AAGJ,uBAAOZ,QAAP;AAEC;;AAGD;AAEH;;;;gGAEsBF,I;;;;;;;uCAETf,KAAK+B,iBAAL,CAAuBhB,KAAKiB,MAA5B,EAAoC,EAAEC,QAAQlB,KAAKmB,QAAf,EAApC,C;;;;;;;;;;AAENC,wCAAQC,GAAR;;;;;;;;;;;;;;;;;;yCAISC,M,EAAQ;AACrB,gBAAIC,SAAS;AACTC,wBAAQ,SADC;AAETC,wBAAQ;AACJC,6BAAS,CAAC,EAAEC,KAAKL,MAAP,EAAD;AADL;AAFC,aAAb;;AAOA3B,eAAGiC,aAAH,CAAiBL,MAAjB,EAAyB,UAAUM,GAAV,EAAe7B,IAAf,EAAqB;AAC1C,oBAAI6B,GAAJ,EAAST,QAAQC,GAAR,CAAYQ,GAAZ,EAAiBA,IAAIC,KAArB,EAAT,CAAsC;AAAtC,qBACKV,QAAQC,GAAR,CAAYrB,IAAZ,EAFqC,CAER;AACrC,aAHD;AAIH;;AAEF;;;;;;;;;;;;kGAQ0B+B,Y,EAAcC,Y;;;;;;;AAC5BC,sD,GAAyB,C;;sCAE5BD,iBAAgB,I;;;;;;uCACE/C,KAAK4B,IAAL,CAAU,EAACqB,kCAAQH,YAAR,EAAD,EAAV,C;;;AAAdI,qC;AACAC,mD,GAAuBD,MAAMxB,MAAN,CAAa;AAAA,2CAAG0B,EAAE/B,YAAF,KAAiB,IAApB;AAAA,iCAAb,C;;sCAExB8B,oBAAoBE,MAApB,GAA6BL,sB;;;;;kEAA+B,K;;;AAAM;;kEAE9D,I;;;;uCAGWhD,KAAK4B,IAAL,CAAU,EAACqB,kCAAQH,YAAR,EAAD,EAAV,C;;;AAAdI,sC;AACAC,oD,GAAuBD,OAAMxB,MAAN,CAAa;AAAA,2CAAG0B,EAAE/B,YAAF,KAAiB,IAApB;AAAA,iCAAb,C;AAGvBiC,gD,GAAmBP,aAAarB,MAAb,CAAoB;AAAA,2CAAG6B,EAAEpC,IAAF,CAAOqC,WAAP,CAAmBnC,YAAnB,KAAoC,IAAvC;AAAA,iCAApB,C;;sCAEpBiC,iBAAiBD,MAAjB,GAA0B,CAA1B,IAA+BF,qBAAoBE,MAApB,GAA2B,C;;;;;kEAAU,K;;;sCACpEF,qBAAoBE,MAApB,GAA6BL,sB;;;;;kEAA+B,K;;;AAAM;;kEAE9D,I;;;;;;;;;;;;;;;;;;;;;AAUnBS,OAAOC,OAAP,GAAiB5C,MAAjB","file":"helper.js","sourcesContent":["const sgMail = require('@sendgrid/mail');\n\"use strict\";\nrequire(\"dotenv\").config();\nconst mongoose = require(\"mongoose\"),\n    User = mongoose.model(\"User\");\nconst AWS = require('aws-sdk');\n\nAWS.config = {\n    accessKeyId: process.env.AWSaccessKeyId,\n    secretAccessKey: process.env.AWSsecretAccessKey,\n    region: \"us-east-2\"\n};\n\nlet s3 = new AWS.S3({});\n\nsgMail.setApiKey(process.env.SEND_GRID_API);\n\n\n/**\n *\n *\n * @class Helper\n */\nclass Helper {\n\n    /**\n     *\n     *\n     * @param {*} data\n     * @returns {String}\n     * @memberof Helper\n     * @description accepts an array of roles or an object whose properties are roles and \n     * returns a role of type string. e.g 'Funder'\n     */\n    getRole(data) {\n        const roles= ['Funder', 'Contractor', 'Evaluator']\n        let userRole;\n\n        if(!(data instanceof Array)){\n            let user ={\n                isFunder:data.isFunder,\n                isContractor:data.isContractor,\n                isEvaluator :data.isEvaluator\n            }\n            \n            let role = Object.keys(user).filter(k => user[k] === true);\n\n            userRole = roles.find((r)=>{\n                return r = role[0].includes(r);\n            });\n\n            return userRole;\n\n        }else{\n            userRole = roles.find((r)=>{\n                return r = data[0].includes(r);\n            });\n        return userRole;\n\n        }\n       \n       \n        // return userRole;\n\n    }\n\n    async updateUserSocket(data) {\n        try {\n            await User.findByIdAndUpdate(data.userId, { socket: data.socketId });\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    removeImgFBucket(object) {\n        let params = {\n            Bucket: 'selamvp',\n            Delete: {\n                Objects: [{ Key: object }]\n            },\n        }\n\n        s3.deleteObjects(params, function (err, data) {\n            if (err) console.log(err, err.stack); // an error occurred\n            else console.log(data);           // successful response\n        });\n    }\n\n   /**\n    *\n    *\n    * @param {*} stakeHolders\n    * @param {*} pStakeholder\n    * @returns\n    * @memberof Helpers\n    */\n   async shouldAddContractor(stakeHolders, pStakeholder){\n         const MAX_CONTRACTOR_ALLOWED = 1;\n\n        if (pStakeholder ===null){\n            let users = await User.find({_id:[...stakeHolders]});\n            let newContractorsCount  = users.filter(u=>u.isContractor===true);\n\n            if(newContractorsCount.length > MAX_CONTRACTOR_ALLOWED){return false};\n\n            return true;\n\n        }else{\n            let users = await User.find({_id:[...stakeHolders]});\n            let newContractorsCount  = users.filter(u=>u.isContractor===true);\n    \n    \n            let pContractorCount = pStakeholder.filter(s=>s.user.information.isContractor === true );\n            \n            if(pContractorCount.length > 0 && newContractorsCount.length>0){return false}\n            if(newContractorsCount.length > MAX_CONTRACTOR_ALLOWED){return false};\n    \n            return true;\n        }\n\n        \n\n    }\n\n \n}\n\nmodule.exports = Helper;"]}