{"version":3,"sources":["../../../test/user.js"],"names":["chai","require","chaiHttp","supertest","app","insertUserSeed","userWithExistingEmail","validUser","validUserUpdateInfo","userWithWrongEmail","invalidUserUpdateInfo","userWithWrongPhone","invalidUserUpdateInfo2","userWithWrongPassword","userWithExistingPhone","validUser2","generateToken","mongoose","User","model","Organization","expect","request","token","user","use","describe","before","email","after","remove","it","done","post","send","end","err","res","body","firstName","to","equal","message","phone","status","get","set","authorization","length"],"mappings":"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","file":"user.js","sourcesContent":["const chai = require('chai');\nconst chaiHttp = require('chai-http');\nconst  supertest = require('supertest');\nconst  app =require('../sela_app');\nconst { insertUserSeed,\n        userWithExistingEmail,\n        validUser,validUserUpdateInfo,\n        userWithWrongEmail,invalidUserUpdateInfo,\n        userWithWrongPhone,invalidUserUpdateInfo2,\n        userWithWrongPassword,userWithExistingPhone,\n        validUser2, generateToken,\n        } = require('./helpers/mockData')\nconst mongoose = require(\"mongoose\");\nconst User = mongoose.model(\"User\");\nconst Organization = mongoose.model('Organization')\n\n\nconst expect = chai.expect;\nconst request = supertest(app);\nlet token='';\nlet user =''\nchai.use(chaiHttp);\n\ndescribe('user Controller', () => {\nbefore(async() => {\n   user =  await insertUserSeed();\n   validUserUpdateInfo.email= user.email;\n    token= generateToken(user);\n\n\n});\n\nafter(async ()=>{\n  await User.remove({});\n  await Organization.remove({});\n})\n\n  describe('Create User POST: /register', () => {\n    it('should successfully create a new user', (done) => {\n      request\n        .post('/register')\n        .send(validUser)\n        .expect(200)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.firstName).to.equal(validUser.firstName);\n          done();\n        });\n    });\n\n    it('should successfully create a new user', (done) => {\n      request\n        .post('/register')\n        .send(validUser2)\n        .expect(200)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.firstName).to.equal(validUser2.firstName);\n          done();\n        });\n    });\n  });\n\n  \n\n  describe('Create User Validation POST: /register', () => {\n    it('should return 401 on duplicate email', (done) => {\n      request\n        .post('/register')\n        .send(userWithExistingEmail)\n        .expect(401)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.message)\n            .to\n            .equal(`Sela already has an account for a user with e-mail address: ${userWithExistingEmail.email}. Please try another e-mail address`);\n          done();\n        });\n    });\n    it('should return 401 if phone number already exist', (done) => {\n      request\n        .post('/register')\n        .send(userWithExistingPhone)\n        .expect(401)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.message)\n            .to\n            .equal(\n              `Sela already has an account for a user with phone number: ${validUser.phone}. Please try another phone number`);\n          done();\n        });\n    });\n  });\n\n\n  describe('Signin user POST: /login', () => {\n    it('should successfully log in a registered user', (done) => {\n      request\n        .post('/login')\n        .send(validUser)\n        .expect(200)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.email).to.equal(validUser.email);\n          done();\n        });\n    });\n    it('should return a 401 error if wrong email', (done) => {\n      request\n        .post('/login')\n        .send(userWithWrongEmail)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.message)\n            .to\n            .equal('Sela does not have an account with those user credentials. Please try another email/phone number.');\n          expect(res.status).to.equal(401);\n          done();\n        });\n    });\n    it('should return a 401 error if wrong phone', (done) => {\n      request\n        .post('/login')\n        .send(userWithWrongPhone)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.message)\n            .to\n            .equal('Sela does not have an account with those user credentials. Please try another email/phone number.');\n          expect(res.status).to.equal(401);\n          done();\n        });\n    });\n    it('should return a 401 error if wrong password', (done) => {\n      request\n        .post('/login')\n        .send(userWithWrongPassword)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.message)\n            .to\n            .equal('That is the wrong password for this account. Please try again');\n          expect(res.status).to.equal(401);\n          done();\n        });\n    });\n    // it('should return a 401 for an account that is not approved', (done) => {\n    //   request\n    //     .post('/login')\n    //     .send(validUser2)\n    //     .end((err, res) => {\n    //       if (err) return done(err);\n    //       // expect(res.body.message)\n    //       //   .to\n    //       //   .equal('Your account has not been activated.');\n    //       expect(res.status).to.equal(401);\n    //       done();\n    //     });\n    // });\n  });\n\n  describe('GET USERS GET:/users', ()=>{\n    it('should be able to list all users excluding the authenticated user', (done)=>{\n      request\n      .get('/users')\n      .set({authorization:token})\n      .expect(200)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body.length).to.equal(2);\n        done();\n      });\n    });\n\n  });\n\n  describe('UPDATE USER INFO:/update', ()=>{\n    it('should update the information of the authenticated user', (done)=>{\n      request\n      .post('/update')\n      .set({authorization:token})\n      .send(validUserUpdateInfo)\n      .expect(200)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body.firstName).to.equal(validUserUpdateInfo.firstName);\n        done();\n      });\n    });\n\n    it('should fail with status code 401 if current password is incorrect', (done)=>{\n      request\n      .post('/update')\n      .set({authorization:token})\n      .send(invalidUserUpdateInfo)\n      .expect(401)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body.message).to.equal(\"That is the wrong password for this account. Please try again\");\n        done();\n      });\n    });\n\n    it('should fail with status code 401 with invalid change password details', (done)=>{\n      request\n      .post('/update')\n      .set({authorization:token})\n      .send(invalidUserUpdateInfo2)\n      .expect(401)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body.message).to.equal(\"Passwords don't match\");\n        done();\n      });\n    });\n\n  });\n\n  // describe('GET STAKEHOLDER INFO:/users/i', ()=>{\n  //   it('should retrieve the information of the stakeholder', (done)=>{\n  //     request\n  //     .get('/users/i')\n  //     .set({authorization:token})\n  //     .send({id:user._id})\n  //     .expect(200)\n  //     .end((err, res) => {\n  //       if (err) return done(err);\n  //       // expect(res.body.length).to.equal(2);\n  //       done();\n  //     });\n  //   });\n\n  // });\n\n});\n"]}