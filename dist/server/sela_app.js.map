{"version":3,"sources":["../../sela_app.js"],"names":["require","ROOT","__dirname","FRONTEND","express","app","port","process","env","PORT","cors","bodyParser","logger","dotenv","validator","http","Server","io","pageNotFound","generalError","config","mongooseInit","passportInit","environmentsAll","environmentsDev","environmentsPro","notification","Helper","on","socket","data","helper","updateUserSocket","getUserNViaSocket","notifications","emit","console","log","id","user","disable","use","json","urlencoded","extended","customValidators","isArray","value","Array","notEmpty","array","length","gte","param","num","req","res","next","AWS","accessKeyId","AWSaccessKeyId","secretAccessKey","AWSsecretAccessKey","region","bucket","signatureVersion","headers","ACL","uniquePrefix","NODE_ENV","call","listen","module","exports"],"mappings":"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","file":"sela_app.js","sourcesContent":["require('babel-core/register');\nrequire('babel-polyfill');\n\nROOT = __dirname;\nFRONTEND = __dirname + \"/public\";\n\nvar express = require(\"express\");\nvar app = express();\nvar port = process.env.PORT || 3009;\nvar cors = require(\"cors\");\nvar bodyParser = require(\"body-parser\");\nvar logger = require(\"morgan\");\nvar dotenv = require(\"dotenv\");\nconst validator = require('express-validator');\n\nvar http = require(\"http\").Server(app);\n\nconst io = require('socket.io')(http);\n\n\n\nvar { pageNotFound, generalError } = require(\"./in-use/utils\");\n\ndotenv.config();\n\nvar mongooseInit = require(ROOT + \"/config/initializers/mongoose\");\nvar passportInit = require(ROOT + \"/config/initializers/passport\");\n\nvar environmentsAll = require(ROOT + \"/config/environments/all\");\nvar environmentsDev = require(ROOT + \"/config/environments/development\");\nvar environmentsPro = require(ROOT + \"/config/environments/production\");\n\nmongooseInit(() => {\n  passportInit();\n});\n\nconst notification = require('./app/controllers/Notification');\nconst Helper = require('./app/helper/helper');\n\n\nio.on('connection', (socket)=>{\n  socket.on('user', async(data)=>{\n    const helper = new Helper();\n    await helper.updateUserSocket(data);\n    const notifications = await notification.getUserNViaSocket(data);\n    socket.emit('notifications', {notifications});\n  });\n  console.log('user connected', socket.id)\n  socket.emit('connected', {user:socket.id});\n  // setInterval(() => socket.emit('message', 'you are still connected...initiating attack on client'), 10000);\n\n  socket.on('disconnect',(data)=>{\n    console.log(`user ${socket.id} disconnected,`, data);\n  })\n});\n\n\n\napp.disable('x-powered-by');\n\napp.use(logger(\"dev\"));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\napp.use(cors());\n\napp.use(validator({\n  customValidators: {\n     isArray: function(value) {\n        return Array.isArray(value);\n     },\n     notEmpty: function(array) {\n        return array.length > 0;\n     },\n     gte: function(param, num) {\n        return param >= num;\n     }\n  }\n}));\n\napp.use(function(req, res, next) {\n  req.io = io;\n  next();\n});\nconst AWS = require(\"aws-sdk\");\nAWS.config = {\n  accessKeyId: process.env.AWSaccessKeyId,\n  secretAccessKey: process.env.AWSsecretAccessKey,\n  region: \"us-east-2\"\n};\n\napp.use(\n  \"/s3\",\n  require(\"react-s3-uploader/s3router\")({\n    bucket: \"selamvp\",\n    region: \"us-east-2\", //optional\n    signatureVersion: \"v4\", //optional (use for some amazon regions: frankfurt and others)\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\"\n    }, // optional\n    ACL: \"public-read\",\n    uniquePrefix: true\n    // (4.0.2 and above) default is true, setting the attribute to false preserves the original filename in S3\n  })\n);\n\n// http.Server(app);\n\nif (process.env.NODE_ENV === \"development\") {\n  environmentsDev.call(app);\n} else if (process.env.NODE_ENV === \"production\") {\n  environmentsPro.call(app);\n}\n\nenvironmentsAll.call(app);\n\nrequire(\"./routes\")(app);\n\n// catch 404 and forward to error handler\napp.use(pageNotFound);\n// error handler\napp.use(generalError);\n\nhttp.listen(port, function() {\n  console.log(\"listening on port \" + port);\n});\n\nmodule.exports=app;\n"]}