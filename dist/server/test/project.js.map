{"version":3,"sources":["../../../test/project.js"],"names":["chai","require","chaiHttp","supertest","app","insertUserSeed","validProject","validStakeholders","validUser","generateToken","insertProjectSeed","invalidStakeholders","mongoose","User","model","Organization","Project","expect","request","token","user","stakeholder","projects","userProjectId","use","describe","before","id","_id","stakeholders","after","remove","it","done","post","set","authorization","send","end","err","res","body","success","to","equal","message","lastName","firstName","get","length","delete"],"mappings":"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","file":"project.js","sourcesContent":["const chai = require('chai');\nconst chaiHttp = require('chai-http');\nconst  supertest = require('supertest');\nconst  app =require('../sela_app');\nconst { insertUserSeed,validProject,validStakeholders,\n        validUser, generateToken, insertProjectSeed,invalidStakeholders\n        } = require('./helpers/mockData')\nconst mongoose = require(\"mongoose\");\nconst User = mongoose.model(\"User\");\nconst Organization = mongoose.model('Organization');\nvar Project = mongoose.model(\"Project\");\n\n\n\nconst expect = chai.expect;\nconst request = supertest(app);\nlet token='';\nlet user ='';\nlet stakeholder='';\nlet projects ='';\nlet userProjectId=''// get the authenticated test user project id\nchai.use(chaiHttp);\n\n\ndescribe('project controller', () => {\nbefore(async() => {\n\n  // seed a user into the db collection\n   user =  await insertUserSeed();\n\n  //  generatee token for the seeded user\n   token= generateToken(user);\n\n  //  seed projects into the db collection\n   projects= await insertProjectSeed();\n\n\n   stakeholder = validStakeholders;\n   stakeholder.id=projects[0]._id;\n   stakeholder.stakeholders[0] = user._id;\n\n\n});\n\nafter(async ()=>{\n  await User.remove({});\n  await Organization.remove({});\n  await Project.remove({});\n})\n\n  describe('Add Project: /project', () => {\n    it('should successfully add a new project by the authenticated user', (done) => {\n      request\n        .post('/project')\n        .set({authorization:token})\n        .send(validProject)\n        .expect(200)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.success).to.equal(true);\n          done();\n        });\n    });\n\n  });\n\n  describe('Stakeholder: /project/stakeholder', () => {\n    it('should successfully add stakeholder(s) to a project', (done) => {\n      request\n        .post('/project/stakeholder')\n        .set({authorization:token})\n        .send(stakeholder)\n        .expect(200)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.message).to.equal(\"Stakeholder Added Sucessfully\");\n          done();\n        });\n    });\n\n    it('should reject adding duplicate stakeholder to a project', (done) => {\n      request\n        .post('/project/stakeholder')\n        .set({authorization:token})\n        .send(stakeholder)\n        .expect(401)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.message).to.equal(`Cannot add stakeholders because: \"This project has a connection with ${user.lastName } ${user.firstName}\" `);\n          done();\n        });\n    });\n\n    it('should reject adding stakeholders with no stakeholder information', (done) => {\n      request\n        .post('/project/stakeholder')\n        .set({authorization:token})\n        .send(invalidStakeholders)\n        .expect(401)\n        .end((err, res) => {\n          if (err) return done(err);\n          // expect(res.body.message).to.equal(`No Stakeholder Information Provided`);\n          done();\n        });\n    });\n  });\n\n  describe('Get Project(s) GET: /projects ', ()=>{\n    it('should get all projects', (done)=>{\n      request\n      .get('/projects')\n      .set({authorization:token})\n      .expect(200)\n      .end((err, res) => {\n        if (err) return done(err);\n        userProjectId=res.body.projects[0]._id\n        expect(res.body.projects.length).to.equal(1);\n        done();\n      });\n    });\n\n    it('should get a single project', (done)=>{\n      request\n      .get(`/project/${userProjectId}`)\n      .set({authorization:token})\n      .expect(200)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body._id).to.equal(userProjectId);\n        done();\n      });\n    });\n  });\n\n\n  describe('Delete project DELETE: /project/:id', ()=>{\n    it('it should toggle project activated if req.header[\"permanent-delete\"] !== true', (done)=>{\n      request\n      .delete(`/project/${userProjectId}`)\n      .set({authorization:token})\n      .expect(200)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body.success).to.equal(true);\n        done();\n      });\n    });\n\n    it('it should delete project if req.header[\"permanent-delete\"] === true', (done)=>{\n      request\n      .delete(`/project/${userProjectId}`)\n      .set({authorization:token, 'permanent-delete':'true'})\n      .expect(200)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body.success).to.equal(true);\n        done();\n      });\n    });\n  });\n\n});\n"]}