{"version":3,"sources":["../../../../app/controllers/Stakeholder.js"],"names":["require","config","mongoose","Project","model","Notification","User","Helper","notify","Stakeholder","req","res","userId","find","projects","length","status","json","console","log","message","projectId","params","id","notificationId","query","notification","agreed","body","success","failure","findOne","_id","activated","project","user","stakeholders","u","information","toString","updateOne","$set","updated","Boolean","n","notificationData","stakeholderName","decodedTokenData","firstName","lastName","stakeHolderPhoto","profilePhoto","stakeholderId","notifyAcceptance","accepted","name","rejected","successRes","failRes","project_stakeholders","found_stakeholder","s","notifyRequestToJoinP","hasNotified","module","exports"],"mappings":"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","file":"Stakeholder.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nconst mongoose = require(\"mongoose\"),\n    Project = mongoose.model(\"Project\"),\n    Notification = mongoose.model(\"Notification\"),\n    User = mongoose.model(\"User\");\n\nconst Helper = require('../helper/helper');\nconst notify = require('../helper/notifications');\n\n// const accountSid = 'ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';\n// const authToken = 'your_auth_token';\n// const client = require('twilio')(accountSid, authToken);\n\n\n\n/**\n *\n *\n * @class Stakeholder\n */\nclass Stakeholder {\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns {object}\n     * @memberof Stakeholder\n     */\n    static async getStakeHolderJoinedProjects(req, res) {\n        let userId = req.userId\n        try {\n            let projects = await Project.find({\n                'stakeholders.user.information': userId,\n                'stakeholders.user.status': 'ACCEPTED', 'stakeholders.user.agreed': true\n            });\n\n            if (projects.length > 0) {\n                return res.status(200).json({ projects })\n\n            } else {\n                return res.status(200).json({ projects: [] });\n            }\n        } catch (error) {\n            console.log(error)\n            return res.status(500).json({ message: \"Internal server error\" });\n\n        }\n\n    }\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns {object}\n     * @memberof Stakeholder\n     */\n\n    static async acceptOrRejectInvitationToJoinProject(req, res) {\n        let userId = req.userId;\n        let projectId = req.params.id;\n        let notificationId = req.query.notification;\n        let agreed = req.body.agreed;\n\n        let success = true,\n            failure = false;\n\n        let project = await Project.findOne({\n            _id: projectId,\n            activated: true,\n            'stakeholders.user.information': userId\n        });\n\n        if (project === null) {\n            return res.status(404).json({\n                message: \"This project doesn't exists on sela platform\\n\" +\n                    \"or you are not associated with it\"\n            })\n        } else {\n\n            try {\n\n                let user = project.stakeholders.find(u => u.user.information._id.toString() === userId)\n                user = user.user;\n\n                if (user.status === \"ACCEPTED\" && agreed === true) {\n\n                    return res.status(409).json({ message: \"You have already joined this Project.\" });\n\n                } else if (user.status === \"ACCEPTED\" && agreed === false) {\n\n                    return res.status(403).json({ message: \"Please contact project owner.\" });\n\n                }\n                else if (user.status === \"DECLINED\" && agreed === true) {\n\n                    return res.status(403).json({ message: \"You previously declined this invitation. \\n Please contact the project owner to invite you again\" });\n\n                }\n                else if (user.status === \"DECLINED\" && agreed === false) {\n\n                    return res.status(403).json({ message: \"You have previously declined this invitation.\" });\n\n                }\n                let status;\n\n                agreed === true ? status = 'ACCEPTED' : status = 'DECLINED';\n\n                let updated = await Project.updateOne({\n                    _id: projectId,\n                    activated: true,\n                    'stakeholders.user.information': userId\n                },\n                    {\n                        $set: { 'stakeholders.$.user.status': status, 'stakeholders.$.user.agreed': agreed }\n                    });\n\n                if (Boolean(updated.n)) {\n\n                    const notificationData = {\n                        stakeholderName: req.decodedTokenData.firstName + ' ' + req.decodedTokenData.lastName,\n                        stakeHolderPhoto:req.decodedTokenData.profilePhoto,\n                        stakeholderId: userId,\n                        project,\n                        agreed,\n                        notificationId\n                    }\n\n                    await notify.notifyAcceptance(req, notificationData);\n\n                    let message;\n\n                    let accepted = `You have successfully joined ${project.name} project`;\n\n                    let rejected = `Your have successfully declined the invitation to join the project \"${project.name}\"`;\n\n                    agreed === true ? message = accepted : message = rejected;\n\n                    return res.status(200).json({\n                        success: success,\n                        message\n                    });\n                }\n                return res.status(400).json({ success: failure, message: `You were unable to join the project \"${project.name}\"` })\n\n\n            } catch (error) {\n                console.log(error)\n                return res.status(500).json({ message: `internal server error` })\n\n            }\n        }\n\n    }\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns { object }\n     * @memberof Stakeholder\n     */\n    static async requestToJoinP(req, res) {\n        let userId = req.userId;\n        let _id = req.body.projectId;\n\n        let successRes = { success: true };\n        let failRes = { success: false };\n\n        try {\n\n            let project = await Project.findOne({ _id, activated: true });\n\n            if (project === null) {\n                return res.status(404).json({\n                    message: \"Project Not Found\"\n                })\n            }\n\n            let project_stakeholders = project.stakeholders;\n\n            let found_stakeholder = project_stakeholders.find((s) => {\n                return s.user.information._id == userId\n            })\n\n            if (found_stakeholder) {\n                return res.status(401).json({\n                    message: `You already have a connection with the project \"${project.name}\" `\n                });\n            }\n\n            let hasNotified = await notify.notifyRequestToJoinP(req, project);\n\n            if (Boolean(hasNotified.status)) {\n                successRes.message = hasNotified.message;\n                return res.status(200).json( successRes );\n            }\n\n            failRes.message = hasNotified.message;\n            return res.status(400).json({ failRes });\n\n\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({ message: `internal server error` })\n        }\n\n\n    }\n\n    acceptRequestToJoinProject(req, res) {\n\n    }\n}\n\nmodule.exports = Stakeholder;"]}