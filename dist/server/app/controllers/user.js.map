{"version":3,"sources":["../../../../app/controllers/user.js"],"names":["require","config","jwt","mongoose","User","model","Organization","Project","Save","Transaction","Uploads","tokenValidityPeriod","bcrypt","crypto","Helper","Notifications","validator","validate","_","async","options","apiKey","process","env","AFRICAS_TALKING_API","username","AFRICAS_TALKING_APP_USERNAME","AfricasTalking","sms","SMS","helper","notify","exports","find_stakeholder_info","req","res","findOne","_id","body","id","userInfo","find","owner","projects","sender","transactions","uploads","toJSON","password","updateOn","activation","email","json","length","status","register","successRes","success","failRes","phone","query","user","message","type","Boolean","isContractor","isFunder","isEvaluator","userObj","firstName","lastName","profilePhoto","org","organization","signThis","undefined","fetchOrg","name","save","obj","medium","verificationToken","randomBytes","toString","newUser","receiver","to","msg","send","result","emailData","toLowerCase","confirmEmail","console","log","verify","findById","userId","areasOfInterest","token","sign","SECRET","expiresIn","login","inactiveAccountMsg","unverifiedAccount","exec","checkErr","comparePassword","passErr","isMatch","isVerified","update","oldPassword","finalUserObj","objSearch","newPassword","verifyPassword","hash","hashSync","genSaltSync","findOneAndUpdate","$set","new","check","users","filter","u","isAdmin","map","temp","findPStakeholders","projectId","project","stakeholdersForProject","stakeholders","final","innerCount","s","verifyAccountToken","verifiedUser","welcomeMail","resendVerificationToken","field","isEmail","updatedUser","isMobilePhone","updateAreaOfInterest","newInterests","uniq","updateInterest","saveProject","params","remove","saveObj","savedProject"],"mappings":"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","file":"user.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nvar jwt = require(\"jsonwebtoken\");\nvar mongoose = require(\"mongoose\");\nvar User = mongoose.model(\"User\");\nvar Organization = mongoose.model(\"Organization\");\nvar Project = mongoose.model(\"Project\");\nvar Save = mongoose.model(\"Save\");\nvar Transaction = mongoose.model(\"Transaction\");\nvar Uploads = mongoose.model(\"Upload\");\n// var tokenValidityPeriod = 86400; // in seconds; 86400 seconds = 24 hours\nvar tokenValidityPeriod = 604800; // in seconds; 86400 seconds = 24 hours\nvar bcrypt = require(\"bcrypt\");\nconst crypto = require('crypto');\nconst Helper = require('../helper/helper');\nconst Notifications = require('../helper/notifications');\nconst validator = require('validator');\nconst validate = require('../../middleware/validate');\nconst _ = require('lodash');\nconst async = require('async');\n\nconst options = {\n  apiKey: process.env.AFRICAS_TALKING_API,\n  username: process.env.AFRICAS_TALKING_APP_USERNAME\n};\n\nconst AfricasTalking = require('africastalking')(options);\n\n\nlet sms = AfricasTalking.SMS;\n\nconst helper = new Helper();\nconst notify = new Notifications();\n\n\nexports.find_stakeholder_info = async (req, res) => {\n  let userInfo = await User.findOne({ _id: req.body.id });\n  let projects = await Project.find({ owner: req.body.id });\n  let transactions = await Transaction.find({ sender: req.body.id });\n  let uploads = await Uploads.find({ owner: req.body.id });\n\n  userInfo = userInfo.toJSON();\n\n  delete userInfo.password;\n  delete userInfo.updateOn;\n  delete userInfo.activation;\n  delete userInfo.username;\n  delete userInfo.email;\n\n  let json = {\n    userInfo,\n    projects,\n    transactions: transactions.length,\n    uploads: uploads.length\n  };\n\n  if (json !== null) {\n    return res.status(200).json(json);\n  } else {\n    return res.status(401).json({});\n  }\n};\n\nexports.register = async (req, res) => {\n  var successRes = { success: true };\n  var failRes = { success: false };\n\n  const { email, phone } = req.body,\n    query = email ? { email } : { phone };\n\n  let user;\n\n\n  try {\n    user = await User.findOne(query);\n    if (user) {\n      if (user.phone == req.body.phone) {\n        failRes.message =\n          \"Sela already has an account for a user with phone number: \" +\n          req.body.phone +\n          \". Please try another phone number\";\n      }\n      if (user.email == req.body.email) {\n        failRes.message =\n          \"Sela already has an account for a user with e-mail address: \" +\n          req.body.email +\n          \". Please try another e-mail address\";\n      }\n      return res.status(401).json(failRes);\n    }\n  } catch (error) {\n    return res.status(401).json({\n      message: error.message\n    });\n  }\n\n  const type = (user) => {\n    if (Boolean(user.isContractor) === true && Boolean(user.isFunder) === false && Boolean(user.isEvaluator) === false) return { isContractor: true };\n    if (Boolean(user.isContractor) === false && Boolean(user.isFunder) === true && Boolean(user.isEvaluator) === false) return { isFunder: true };\n    if (Boolean(user.isContractor) === false && Boolean(user.isFunder) === false && Boolean(user.isEvaluator) === true) return { isEvaluator: true };\n  }\n\n  var userObj = {\n    ...type(req.body),\n    email: req.body.email,\n    firstName: req.body.firstName,\n    lastName: req.body.lastName,\n    password: req.body.password,\n    phone: req.body.phone,\n    profilePhoto: req.body.profilePhoto\n  };\n\n  try {\n    let org = req.body.organization, signThis = {};\n\n    if (org.id !== \"\" && org.id !== undefined) {\n      let fetchOrg = await Organization.findOne({\n        _id: req.body.organization.id\n      });\n      userObj.organization = fetchOrg.id;\n    } else if (Boolean(org.id) == false && org.name !== \"\") {\n      let obj = await new Organization({ name: org.name }).save();\n      userObj.organization = obj._id;\n    }\n\n    let medium;\n\n    if (req.body.phone && req.body.phone !== \"\" && !req.body.email || req.body.email == \"\") {\n      userObj.verificationToken = crypto.randomBytes(3).toString('hex');\n      medium = 'Phone Number';\n\n      var newUser = await new User(userObj).save();\n\n      const receiver = '+234' + req.body.phone;\n      const to = [receiver];\n\n      const msg = {\n        to: to,\n        message: 'Please verify your phone number with this code: ' +\n          userObj.verificationToken\n      }\n\n\n      let result = await sms.send(msg);\n\n      return res.status(200).json({\n        ...successRes,\n        // ...signThis,\n        // token\n        message: `Registration successful. Please verify your ${medium}`\n      });\n\n\n    } else if (req.body.email && req.body.email !== \"\" && !req.body.phone || req.body.phone == \"\") {\n      medium = 'Email';\n      userObj.verificationToken = crypto.randomBytes(20).toString('hex');\n\n      var newUser = await new User(userObj).save();\n\n      let emailData = {\n        firstName: newUser.firstName,\n        email: email.toLowerCase()\n      }\n\n      notify.confirmEmail(req, emailData, userObj.verificationToken);\n      return res.status(200).json({\n        ...successRes,\n        // ...signThis,\n        // token\n        message: `Registration successful. Please verify your ${medium}`\n      });\n\n    } else if (req.body.email && req.body.email !== \"\" && req.body.phone && req.body.phone !== \"\") {\n      medium = 'Email';\n      userObj.verificationToken = crypto.randomBytes(20).toString('hex');\n\n      var newUser = await new User(userObj).save();\n\n      let emailData = {\n        firstName: newUser.firstName,\n        email: email.toLowerCase()\n      }\n\n      notify.confirmEmail(req, emailData, userObj.verificationToken);\n      return res.status(200).json({\n        ...successRes,\n        // ...signThis,\n        // token\n        message: `Registration successful. Please verify your ${medium}`\n      });\n    }\n\n\n    // if(Boolean(newUser.organization)){\n    //   signThis.organization =  {\n    //     name: newUser.organization.name,\n    //     id: newUser.organization._id\n    //   }\n    // }else{\n    //   signThis.organization = {\n    //     name: \"No Organization\",\n    //     id:\"\"\n    //   }\n    // }\n\n    // let { isFunder, isEvaluator, isContractor } = newUser;\n\n    // signThis = {\n    //   ...signThis,\n    //   id: newUser._id,\n    //   isFunder,\n    //   isEvaluator,\n    //   isContractor,\n    //   firstName: newUser.firstName,\n    //   phone: newUser.phone,\n    //   email: newUser.email,\n    //   lastName: newUser.lastName\n    // };\n\n    // var token = jwt.sign(signThis, process.env.SECRET, {\n    //   expiresIn: tokenValidityPeriod\n    // });\n\n\n  } catch (regErr) {\n    console.log(regErr)\n    failRes.message = regErr.name + \": \" + regErr.message;\n    return res.status(500).json(failRes);\n  }\n};\n\nexports.verify = async (req, res) => {\n  let user = await User.findById(req.userId);\n  let signThis = {};\n\n  const { isFunder, isEvaluator, isContractor } = user;\n        if (Boolean(user.organization)) {\n          signThis.organization = {\n            name: user.organization.name,\n            id: user.organization._id\n          }\n        } else {\n          signThis.organization = {\n            name: \"No Organization\",\n            id: \"\"\n          }\n        }\n\n        signThis = {\n          ...signThis,\n          profilePhoto: user.profilePhoto,\n          id: user._id,\n          isFunder,\n          isEvaluator,\n          isContractor,\n          firstName: user.firstName,\n          phone: user.phone,\n          email: user.email,\n          lastName: user.lastName,\n          areasOfInterest: user.areasOfInterest,\n\n        };\n\n        var token = jwt.sign(signThis, process.env.SECRET, {\n          expiresIn: tokenValidityPeriod\n        });\n\n\n        return res.status(200).json({\n          ...signThis,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          organization: user.organization,\n          token\n        });\n\n};\n\nexports.login = (req, res) => {\n  let successRes = { success: true };\n  let failRes = { success: false };\n  const inactiveAccountMsg = \"Your account has not been activated.\\n\",\n    unverifiedAccount = \"Your email/phone Number has not been verified.\\n\";\n\n  let signThis = {};\n\n  const { email, phone } = req.body,\n    query = email ? { email } : { phone };\n\n  User.findOne(query).exec((checkErr, user) => {\n    if (checkErr) {\n      failRes.message = checkErr.name + \": \" + checkErr.message;\n      return res.status(500).json(failRes);\n    }\n    if (!user) {\n      failRes.message =\n        \"Sela does not have an account with those user credentials. Please try another email/phone number.\";\n      return res.status(401).json(failRes);\n    }\n\n    user.comparePassword(req.body.password, (passErr, isMatch) => {\n      if (passErr) {\n        failRes.message = passErr.name + \": \" + passErr.message;\n        return res.status(500).json(failRes);\n      }\n      if (!isMatch) {\n        failRes.message =\n          \"That is the wrong password for this account. Please try again\";\n        return res.status(401).json(failRes);\n      }\n\n      if (user.activation === \"approved\" && user.isVerified === true) {\n        const { isFunder, isEvaluator, isContractor } = user;\n\n        if (Boolean(user.organization)) {\n          signThis.organization = {\n            name: user.organization.name,\n            id: user.organization._id\n          }\n        } else {\n          signThis.organization = {\n            name: \"No Organization\",\n            id: \"\"\n          }\n        }\n\n        signThis = {\n          ...signThis,\n          profilePhoto: user.profilePhoto,\n          id: user._id,\n          isFunder,\n          isEvaluator,\n          isContractor,\n          firstName: user.firstName,\n          phone: user.phone,\n          email: user.email,\n          lastName: user.lastName,\n          areasOfInterest: user.areasOfInterest,\n\n        };\n\n        var token = jwt.sign(signThis, process.env.SECRET, {\n          expiresIn: tokenValidityPeriod\n        });\n\n\n        return res.status(200).json({\n          ...successRes,\n          ...signThis,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          organization: user.organization,\n          token\n        });\n      } else if (user.activation === \"pending\" && user.isVerified === true) {\n\n        failRes.message = inactiveAccountMsg;\n        return res.status(401).json(failRes);\n\n      } else if (user.activation === \"approved\" && user.isVerified === false) {\n\n        failRes.message = unverifiedAccount;\n        return res.status(401).json(failRes);\n\n      } else if (user.activation === \"pending\" && user.isVerified === false) {\n\n        failRes.message = [unverifiedAccount, inactiveAccountMsg]\n        return res.status(401).json(failRes);\n      }\n\n\n    });\n  });\n\n};\n\nexports.update = async (req, res) => {\n  var successRes = { success: true };\n  var failRes = { success: false };\n\n  try {\n    let oldPassword = req.body.oldPassword;\n    let user = await User.findById(req.userId).exec();\n\n    let finalUserObj = {};\n\n    user.comparePassword(oldPassword, async (passErr, isMatch) => {\n      if (passErr) {\n        failRes.message = passErr.name + \": \" + passErr.message;\n        return res.status(500).json(failRes);\n      }\n\n      if (!isMatch) {\n        failRes.message =\n          \"That is the wrong password for this account. Please try again\";\n        return res.status(401).json(failRes);\n      }\n\n      let objSearch = {};\n\n      if (\n        req.body.newPassword &&\n        req.body.verifyPassword &&\n        req.body.oldPassword\n      ) {\n        if (req.body.newPassword === req.body.verifyPassword) {\n          let password = req.body.newPassword;\n          let hash = bcrypt.hashSync(password, bcrypt.genSaltSync());\n          objSearch = { password: hash };\n\n          finalUserObj = await User.findOneAndUpdate(\n            { _id: req.userId },\n            { $set: objSearch },\n            { new: true }\n          );\n        } else {\n          res.status(401).json({\n            message: \"Passwords don't match\"\n          });\n        }\n      } else {\n\n        objSearch = req.body;\n        delete objSearch.newPassword;\n        delete objSearch.verifyPassword;\n        delete objSearch.oldPassword;\n        delete objSearch.password;\n      }\n\n      let check = await User.findOne({\n        email: objSearch.email\n      });\n\n      // if(check){\n      check = check.toJSON();\n      // }\n\n      console.log(check, req.userId)\n      if (Boolean(check) === true && check._id.toString() === req.userId.toString()) {\n\n        finalUserObj = await User.findOneAndUpdate(\n          { _id: req.userId },\n          { $set: objSearch },\n          { new: true }\n        );\n\n\n        const { isFunder, isEvaluator, isContractor } = finalUserObj,\n          signThis = {\n            profilePhoto: finalUserObj.profilePhoto,\n            id: finalUserObj._id,\n            isFunder,\n            isEvaluator,\n            email: finalUserObj.email,\n            isContractor,\n            phone: finalUserObj.phone,\n            firstName: finalUserObj.firstName,\n            areasOfInterest:finalUserObj.areasOfInterest,\n            organization: {\n              name: finalUserObj.organization.name,\n              id: finalUserObj.organization._id\n            },\n            lastName: finalUserObj.lastName\n          };\n\n        var token = jwt.sign(signThis, process.env.SECRET, {\n          expiresIn: tokenValidityPeriod\n        });\n\n        return res.status(200).json({\n          ...successRes,\n          ...signThis,\n          firstName: finalUserObj.firstName,\n          lastName: finalUserObj.lastName,\n          organization: finalUserObj.organization,\n          token\n        });\n      } else {\n        return res.status(400).json({\n          message: \"Email is in use.\"\n        })\n      }\n    });\n  } catch (error) {\n    return res.status(401).json({\n      message: error.message\n    });\n  }\n};\n\nexports.find = async (req, res) => {\n  let users = await User.find({});\n\n  users = users.filter(u => {\n    u = u.toJSON();\n    return (\n      u._id != req.userId && (u.isAdmin == false || u.isAdmin == undefined)\n    );\n  });\n  users = users.map(u => {\n    let temp = {\n      firstName: u.firstName,\n      lastName: u.lastName,\n      isFunder: u.isFunder,\n      isContractor: u.isContractor,\n      isEvaluator: u.isEvaluator,\n      organization: u.organization,\n      profilePhoto: u.profilePhoto,\n      _id: u._id\n    };\n    return temp;\n  });\n  return res.status(200).json(users);\n};\n\nexports.findPStakeholders = async (req, res) => {\n  try {\n    let project = await Project.findOne({ _id: req.body.projectId });\n\n    let stakeholdersForProject = project.stakeholders;\n\n    let users = await User.find({});\n\n    users = users.filter(u => {\n      u = u.toJSON();\n      return (\n        u._id != req.userId && (u.isAdmin == false || u.isAdmin == undefined)\n      );\n    });\n\n    users = users.map(u => {\n      let temp = {\n        firstName: u.firstName,\n        lastName: u.lastName,\n        isFunder: u.isFunder,\n        isContractor: u.isContractor,\n        isEvaluator: u.isEvaluator,\n        organization: u.organization,\n        _id: u._id\n      };\n      return temp;\n    });\n\n    let final = users.map(u => {\n      let innerCount = 0;\n      stakeholdersForProject.map(s => {\n        if (s._id !== u._id) {\n          innerCount = innerCount + 1;\n        }\n      });\n\n      return innerCount === users.length;\n    });\n\n    return res.status(200).json(final);\n  } catch (error) {\n    return res.status(400).json({ message: error.message });\n  }\n};\n\n\nexports.verifyAccountToken = async (req, res) => {\n  let signThis = {};\n  let successRes = { success: true };\n  let failRes = { success: false };\n  try {\n    const verificationToken = req.query.token\n\n    if (!verificationToken || verificationToken == undefined) {\n      return res.status(400).json({ ...failRes, message: \"Invalid verification token\" })\n    }\n\n    let user = await User.findOne({ verificationToken: verificationToken });\n\n    if (!user) {\n      return res.status(400).json({ ...failRes, message: \"Invalid verification token\" })\n    }\n\n\n    user.verificationToken = null;\n    user.isVerified = true;\n\n    let verifiedUser = await user.save();\n\n    if (verifiedUser) {\n      const { isFunder, isEvaluator, isContractor } = verifiedUser;\n\n      if (Boolean(verifiedUser.organization)) {\n        signThis.organization = {\n          name: verifiedUser.organization.name,\n          id: verifiedUser.organization._id\n        }\n      } else {\n        signThis.organization = {\n          name: \"No Organization\",\n          id: \"\"\n        }\n      }\n\n      signThis = {\n        ...signThis,\n        profilePhoto: verifiedUser.profilePhoto,\n        id: verifiedUser._id,\n        isFunder,\n        isEvaluator,\n        isContractor,\n        firstName: verifiedUser.firstName,\n        phone: verifiedUser.phone,\n        email: verifiedUser.email,\n        lastName: verifiedUser.lastName,\n        areasOfInterest: user.areasOfInterest,\n\n      };\n\n      var token = jwt.sign(signThis, process.env.SECRET, {\n        expiresIn: tokenValidityPeriod\n      });\n\n\n      if (verificationToken.length < 10) {\n        const receiver = '+234' + verifiedUser.phone;\n\n        // send sms\n        const msg = {\n          to: [receiver],\n          message: 'Thank you for verifying your Phone Number'\n          // from: '75111'\n        }\n\n\n        let result = await sms.send(msg);\n\n      } else {\n        let emailData = {\n          firstName: verifiedUser.firstName,\n          email: verifiedUser.email.toLowerCase()\n        }\n\n        notify.welcomeMail(req, emailData);\n      }\n\n\n      return res.status(200).json({\n        ...successRes,\n        ...signThis,\n        firstName: verifiedUser.firstName,\n        lastName: verifiedUser.lastName,\n        organization: verifiedUser.organization,\n        token\n      });\n    }\n\n\n  } catch (error) {\n    console.log(error)\n    res.status(500).json({ ...failRes, message: \"internal server error\" })\n  }\n}\n\n\nexports.resendVerificationToken = async (req, res) => {\n  let successRes = { success: true };\n  let failRes = { success: false };\n\n  try {\n    const { body: { field } } = req;\n\n    if (!field || field === \"\" || field === undefined) {\n      return res.status(400).json({ ...failRes, message: \"invalid information\" })\n    }\n\n    if (validator.isEmail(field)) {\n      let user = await User.findOne({ email: field, isVerified: false });\n\n      if (!user) {\n        return res.status(400).json({ ...failRes, message: `Sela does not have an account with the email ${field}. Please try another email.` })\n      }\n\n      user.verificationToken = crypto.randomBytes(20).toString('hex');\n      user.isVerified = false;\n\n      let updatedUser = await user.save();\n\n      if (updatedUser) {\n        let emailData = {\n          firstName: updatedUser.firstName,\n          email: updatedUser.email\n        }\n\n        notify.confirmEmail(req, emailData, updatedUser.verificationToken);\n\n        return res.status(200).json({\n          ...successRes,\n          message: `An email has been sent to ${field}. Please confirm your email`\n        });\n      }\n\n    } else if (validator.isMobilePhone(field, \"any\")) {\n\n      let user = await User.findOne({ phone: field, isVerified: false });\n\n      if (!user) {\n        return res.status(400).json({ ...failRes, message: `Sela does not have an account with the phone Number ${field}. Please try another Phone Number.` })\n      }\n\n      user.verificationToken = crypto.randomBytes(3).toString('hex');\n      user.isVerified = false;\n\n      let updatedUser = await user.save();\n\n      if (updatedUser) {\n\n        const receiver = '+234' + field;\n        const to = [receiver];\n\n        const msg = {\n          to: to,\n          message: 'Please verify your phone number with this code: ' +\n            updatedUser.verificationToken\n        }\n\n        let result = await sms.send(msg);\n\n        return res.status(200).json({\n          ...successRes,\n          message: `An verification code has been sent to ${field}.`\n        });\n      }\n\n    }\n\n  } catch (error) {\n    console.log(error)\n    res.status(500).json({ ...failRes, message: \"internal server error\" })\n  }\n}\n\nexports.updateAreaOfInterest = async (req, res) => {\n  // validate.validateAddAreaOfInterest(req, res)\n  // const errors = req.validationErrors();\n\n  // if (errors) {\n  //   return res.status(400).json({\n  //     message: errors\n  //   });\n  // }\n  try {\n    const { body: { areasOfInterest } } = req;\n\n    let user = await User.findById(req.userId);\n\n    if (user == null || user == undefined) {\n      return res.status(404).json({ message: \"Bad Data\" })\n    }\n\n    // let existingInterests = user.areasOfInterest;\n\n    let newInterests = [...areasOfInterest];\n    newInterests = _.uniq(newInterests);\n\n    let updateInterest = await User.update({ _id: req.userId }, { $set: { areasOfInterest: newInterests } })\n    if (Boolean(updateInterest)) return res.status(200).json({ message: \"Areas of interest updated successfully\" });\n  } catch (error) {\n    console.log(error)\n    res.status(500).json({ message: \"internal server error\" })\n  }\n}\n\nexports.saveProject=async(req, res)=>{\n  const projectId = req.params.id;\n  try {\n    const project = await Save.findOne({project:projectId, user:req.userId});\n    if(project){\n      await project.remove();\n      return res.status(200).json({message:\"Project removed from saved projects\"})\n    }\n\n    let saveObj={\n      project:projectId,\n      user:req.userId\n    }\n\n    let savedProject = await new Save(saveObj).save();\n    if(savedProject){\n      return res.status(201).json({message:\"Project has been saved\", savedProject})\n    }\n\n  } catch (error) {\n    console.log(error)\n    res.status(500).json({ message: \"internal server error\" })\n  }\n}\n\n"]}