{"version":3,"sources":["../../../test/document.js"],"names":["chai","require","chaiHttp","supertest","app","insertUserSeed","validProject","validDocument","insertProject","generateToken","insertProjectSeed","mongoose","User","model","Organization","Project","Doc","Loc","expect","request","token","user","projects","project","documentId","use","describe","before","_id","projectId","after","remove","it","done","post","set","authorization","send","end","err","res","body","message","to","equal","length","get","info"],"mappings":"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","file":"document.js","sourcesContent":["const chai = require('chai');\nconst chaiHttp = require('chai-http');\nconst  supertest = require('supertest');\nconst  app =require('../sela_app');\nconst { insertUserSeed,validProject,validDocument,insertProject,\n         generateToken, insertProjectSeed,\n        } = require('./helpers/mockData')\nconst mongoose = require(\"mongoose\");\nconst User = mongoose.model(\"User\");\nconst Organization = mongoose.model('Organization');\nvar Project = mongoose.model(\"Project\");\nvar Doc = mongoose.model(\"Document\");\nvar Loc = mongoose.model(\"Location\");\n\n\n\nconst expect = chai.expect;\nconst request = supertest(app);\nlet token='';\nlet user;\nlet projects;\nlet project;\n// let userProjectId;// get the authenticated test user project id\nlet documentId;\nchai.use(chaiHttp);\n\n\ndescribe('Document controller', () => {\nbefore(async() => {\n\n  // seed a user into the db collection\n   user =  await insertUserSeed();\n\n  //  generatee token for the seeded user\n   token= generateToken(user);\n\n  //  seed projects into the db collection\n   projects= await insertProjectSeed();\n\n//    insert a project for the current user\n   project= await insertProject(user._id);\n\n//    set the  projectId for the document to be inserted to the current inserted project._id\n   validDocument.projectId=project._id;\n\n\n\n});\n\nafter(async ()=>{\n// delete all collections to avoid clahsing datas\n  await User.remove({});\n  await Organization.remove({});\n  await Project.remove({});\n  await Doc.remove({});\n  await Loc.remove({});\n})\n\n  describe('Add Document: /documents', () => {\n    it('should successfully add a new document to a project by the authenticated user', (done) => {\n      request\n        .post('/documents')\n        .set({authorization:token})\n        .send(validDocument)\n        .expect(200)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.message).to.equal(\"Document Saved Successfully\");\n          done();\n        });\n    });\n\n  });\n\n  describe('Get Documents:', () => {\n    it('should successfully get all documents associated with a project', (done) => {\n      request\n        .post('/documents/get')\n        .set({authorization:token})\n        .send({projectId:project._id})\n        .expect(200)\n        .end((err, res) => {\n          if (err) return done(err);\n          documentId=res.body[0]._id\n          expect(res.body.length).to.equal(1);\n          done();\n        });\n    });\n\n    it('should 404 for a project with incorrect id', (done) => {\n        request\n          .post('/documents/get')\n          .set({authorization:token})\n          .send({projectId:\"5bffe86b0dccba6f553d7257\"})\n          .expect(404)\n          .end((err, res) => {\n            if (err) return done(err);\n            expect(res.body.message).to.equal(\"No Documents Found\");\n            done();\n          });\n      });\n\n      it('should successfully get a single document detail', (done) => {\n        request\n          .get(`/documents/${documentId}`)\n          .set({authorization:token})\n          .expect(200)\n          .end((err, res) => {\n            if (err) return done(err);\n            expect(res.body.info._id).to.equal(documentId);\n            done();\n          });\n      });\n  });\n\n});\n"]}