{"version":3,"sources":["../../../../../app/models/in-use/task.js"],"names":["mongoose","require","autoPopulate","mongoosePaginate","Schema","ObjectId","Types","Project","Milestone","Evidence","taskStructure","name","type","String","required","max","description","project","ref","dueDate","Date","endDate","default","status","enum","createdBy","autopopulate","select","assignedTo","estimatedCost","Number","isInMilestone","Boolean","schemaOptions","collection","minimize","id","toJSON","getters","virtuals","versionKey","retainKeyOrder","toObject","timestamps","autoIndex","process","env","NODE_ENV","strict","test","TaskSchema","post","req","res","remove","task","_id","update","$pull","tasks","next","plugin","module","exports","model"],"mappings":"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","file":"task.js","sourcesContent":["var mongoose = require(\"mongoose\");\nvar autoPopulate = require(\"mongoose-autopopulate\");\nconst mongoosePaginate = require('mongoose-paginate');\n\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.Types.ObjectId;\n\n// import related models\n\nconst Project = require(\"./project\");\nconst Milestone = require(\"./milestone\");\nconst Evidence = require(\"./evidence\");\n\nvar taskStructure = {\n  name: {\n    type: String,\n    required: true,\n    max: 100\n  },\n  description: {\n    type: String,\n    required: true,\n    max: 100\n  },\n  // TODO: Should the due date be required when creating a task?\n  project: {\n    type: ObjectId,\n    ref: \"Project\",\n    required: true\n  }, // reference to associated project\n  dueDate: {\n    type: Date,\n    required: true\n  },\n  endDate: {\n    type: Date,\n    default: null\n  },\n  status: {\n    type: String,\n    enum: [\"UNASSIGNED\", \"ASSIGNED\", \"STARTED\", \"TERMINATED\", \"COMPLETED\"],\n    default: \"UNASSIGNED\"\n  },\n  createdBy: {\n    type: ObjectId,\n    ref: \"User\",\n    autopopulate: {\n      select:\n        \"isFunder isContractor isEvaluator  firstName lastName email\"\n    }\n  },\n  assignedTo: {\n    type: ObjectId,\n    ref: \"User\",\n    default: null,\n    autopopulate: {\n      select:\n        \"isFunder isContractor isEvaluator  firstName lastName email _id\"\n    }\n  },\n  // evaluators: [{\n  //   type: ObjectId,\n  //   ref: \"User\",\n  //   default: null\n  // }],\n  // completedBy: {\n  //   type: ObjectId,\n  //   ref: \"User\",\n  //   default: null\n  // },\n  \n  // agentEvaluations: [\n  //   {\n  //     type: ObjectId,\n  //     ref: \"Evaluation\",\n  //     default: null\n  //   }\n  // ],\n  // contractorEvaluations: [\n  //   {\n  //     text: {\n  //       type: String,\n  //       default: null\n  //     },\n  //     isCompleted: {\n  //       type: Boolean,\n  //       default: false\n  //     },\n  //     proof: {\n  //       type: String,\n  //       default: ''\n  //     }\n  //   }\n  // ],\n  estimatedCost: {\n    type: Number,\n    default: 0\n  },\n  isInMilestone:{\n    type:Boolean,\n    default:false\n  }\n \n};\n\nvar schemaOptions = {\n  collection: \"tasks\",\n  minimize: false,\n  id: false,\n  toJSON: {\n    getters: true,\n    virtuals: true,\n    minimize: false,\n    versionKey: false,\n    retainKeyOrder: true\n  },\n  toObject: {\n    getters: true,\n    virtuals: true,\n    minimize: false,\n    versionKey: false,\n    retainKeyOrder: true\n  },\n  timestamps: true,\n  autoIndex: process.env.NODE_ENV === \"development\",\n  strict: process.env.NODE_ENV !== \"development\"\n};\n\nif (process.env.NODE_ENV === \"development\") {\n  taskStructure.test = {\n    type: Boolean,\n    default: true\n  };\n}\n\n\nvar TaskSchema = new Schema(taskStructure, schemaOptions);\n\nTaskSchema.post('remove', async (req, res) => {\n  try {\n    // await Project.update({}, { $pull: {} })\n    await Evidence.remove({ task: this._id });\n    await Milestone.update({}, { $pull: { tasks: { _id: this._id } } });\n  } catch (error) {\n    next(error)\n  }\n})\n\n// TaskSchema.pre(\"save\", true, function (next, done) {\n//   next();\n\n//   this.updatedOn = new Date();\n\n//   done();\n// });\n\n// TaskSchema.pre(\"update\", true, function (next, done) {\n//   next();\n\n//   this.update(\n//     {},\n//     {\n//       $set: {\n//         updatedOn: new Date()\n//       }\n//     }\n//   );\n\n//   done();\n// });\nTaskSchema.plugin(mongoosePaginate);\nTaskSchema.plugin(autoPopulate);\nmodule.exports = mongoose.model(\"Task\", TaskSchema);\n"]}