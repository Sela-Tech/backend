{"version":3,"sources":["../../../../app/controllers/uploads.js"],"names":["require","config","mongoose","Upload","model","exports","new","req","res","successRes","success","failRes","uploadObj","body","newProject","save","projErr","message","name","status","json","find","checkQuery","limit","parseInt","query","page","skip","otherQueryParams","tokenExists","owner","userId","exec","err","uploads"],"mappings":"AAAA;;;;AACAA,QAAQ,QAAR,EAAkBC,MAAlB;AACA,IAAMC,WAAWF,QAAQ,UAAR,CAAjB;AAAA,IACEG,SAASD,SAASE,KAAT,CAAe,QAAf,CADX;;AAGAC,QAAQC,GAAR,GAAc,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1B,MAAIC,aAAa,EAAEC,SAAS,IAAX,EAAjB;AACA,MAAIC,UAAU,EAAED,SAAS,KAAX,EAAd;AACA,MAAIE,YAAYL,IAAIM,IAApB;;AAEA,MAAIC,aAAa,IAAIX,MAAJ,CAAWS,SAAX,CAAjB;AACAE,aAAWC,IAAX,CAAgB,mBAAW;AACzB,QAAIC,OAAJ,EAAa;AACXL,cAAQM,OAAR,GAAkBD,QAAQE,IAAR,GAAe,IAAf,GAAsBF,QAAQC,OAAhD;AACA,aAAOT,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,OAArB,CAAP;AACD;AACD,WAAOH,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBX,UAArB,CAAP;AACD,GAND;AAOD,CAbD;;AAeAJ,QAAQgB,IAAR;AAAA,qEAAe,iBAAOd,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,sBADS,GACI,EAAEC,SAAS,IAAX,EADJ;AAETC,mBAFS,GAEC,EAAED,SAAS,KAAX,EAFD;AAITY,sBAJS,GAII,EAJJ;AAKb;;AACIC,iBANS,GAMDC,SAASjB,IAAIkB,KAAJ,CAAUF,KAAV,GAAkBhB,IAAIkB,KAAJ,CAAUF,KAA5B,GAAoC,CAA7C,EAAgD,EAAhD,CANC;AAOb;;AACIG,gBARS,GAQFnB,IAAIkB,KAAJ,CAAUC,IAAV,GAAiBnB,IAAIkB,KAAJ,CAAUC,IAA3B,GAAkC,CARhC;AASb;;AACIC,gBAVS,GAUFH,SAASE,OAAOH,KAAP,GAAeA,KAAxB,EAA+B,EAA/B,CAVE;AAWb;;AACIK,4BAZS,GAYUrB,IAAIkB,KAZd;AAab;;AACA,mBAAOG,iBAAiBL,KAAxB;AACA,mBAAOK,iBAAiBF,IAAxB;;AAEAJ,yBAAaf,IAAIsB,WAAJ,GACT,EAAED,kCAAF,EAAoBE,OAAOvB,IAAIwB,MAA/B,EADS,GAETH,gBAFJ;;AAIAzB,mBAAOkB,IAAP,CAAYC,UAAZ,EACGK,IADH,CACQA,IADR,EAEGJ,KAFH,CAESA,KAFT,EAGGS,IAHH,CAGQ,UAASC,GAAT,EAAcC,OAAd,EAAuB;AAC3B,kBAAID,GAAJ,EAAS;AACPtB,wBAAQM,OAAR,GAAkBgB,IAAIhB,OAAtB;AACA,uBAAOT,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,OAArB,CAAP;AACD;AACD,kBAAI,CAACuB,OAAL,EACE,OAAO1B,IAAIY,IAAJ,CAAS;AACdH,yBAAS;AADK,eAAT,CAAP;;AAIFR,yBAAWyB,OAAX,GAAqBA,OAArB;AACA,qBAAO1B,IAAIY,IAAJ,CAASX,UAAT,CAAP;AACD,aAfH;;AArBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","file":"uploads.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nconst mongoose = require(\"mongoose\"),\n  Upload = mongoose.model(\"Upload\");\n\nexports.new = (req, res) => {\n  var successRes = { success: true };\n  var failRes = { success: false };\n  var uploadObj = req.body;\n\n  var newProject = new Upload(uploadObj);\n  newProject.save(projErr => {\n    if (projErr) {\n      failRes.message = projErr.name + \": \" + projErr.message;\n      return res.status(500).json(failRes);\n    }\n    return res.status(200).json(successRes);\n  });\n};\n\nexports.find = async (req, res) => {\n  var successRes = { success: true };\n  var failRes = { success: false };\n\n  var checkQuery = {};\n  // limit result else return all\n  let limit = parseInt(req.query.limit ? req.query.limit : 0, 10);\n  // pagination logic\n  let page = req.query.page ? req.query.page : 1;\n  // page hopping logic\n  let skip = parseInt(page * limit - limit, 10);\n  // let the remaining queries stay in the variable\n  let otherQueryParams = req.query;\n  // delete thes because they will affect the look up in the db\n  delete otherQueryParams.limit;\n  delete otherQueryParams.page;\n\n  checkQuery = req.tokenExists\n    ? { otherQueryParams, owner: req.userId }\n    : otherQueryParams;\n\n  Upload.find(checkQuery)\n    .skip(skip)\n    .limit(limit)\n    .exec(function(err, uploads) {\n      if (err) {\n        failRes.message = err.message;\n        return res.status(400).json(failRes);\n      }\n      if (!uploads)\n        return res.json({\n          message: \"No Uploads Found\"\n        });\n\n      successRes.uploads = uploads;\n      return res.json(successRes);\n    });\n};\n"]}