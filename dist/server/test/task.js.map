{"version":3,"sources":["../../../test/task.js"],"names":["chai","require","chaiHttp","supertest","app","insertUserSeed","validProject","validTask","insertProject","generateToken","invalidTask","insertProjectSeed","mongoose","User","model","Organization","Project","Task","expect","request","token","user","projects","project","taskId","use","describe","before","_id","projectId","after","remove","it","done","post","set","authorization","send","end","err","res","body","message","to","equal","get"],"mappings":"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","file":"task.js","sourcesContent":["const chai = require('chai');\nconst chaiHttp = require('chai-http');\nconst  supertest = require('supertest');\nconst  app =require('../sela_app');\nconst { insertUserSeed,validProject,validTask,insertProject,\n         generateToken, invalidTask, insertProjectSeed, \n        } = require('./helpers/mockData')\nconst mongoose = require(\"mongoose\");\nconst User = mongoose.model(\"User\");\nconst Organization = mongoose.model('Organization');\nvar Project = mongoose.model(\"Project\");\nvar Task = mongoose.model(\"Task\");\n\n\n\nconst expect = chai.expect;\nconst request = supertest(app);\nlet token='';\nlet user;\nlet projects;\nlet project;\n// let userProjectId;// get the authenticated test user project id\nlet taskId;\nchai.use(chaiHttp);\n\n\ndescribe('Task controller', () => {\nbefore(async() => {\n\n  // seed a user into the db collection\n   user =  await insertUserSeed();\n\n  //  generatee token for the seeded user\n   token= generateToken(user);\n\n  //  seed projects into the db collection\n   projects= await insertProjectSeed();\n\n//    insert a project for the current user\n   project= await insertProject(user._id);\n\n//    set the  projectId for the document to be inserted to the current inserted project._id\n   validTask.projectId=project._id;\n\n\n\n});\n\nafter(async ()=>{\n// delete all collections to avoid clahsing datas\n  await User.remove({});\n  await Organization.remove({});\n  await Project.remove({});\n  await Task.remove({});\n})\n\n  describe('Add valid Task: /task', () => {\n    it('should successfully add a new task to a project by the authenticated user', (done) => {\n      request\n        .post('/tasks')\n        .set({authorization:token})\n        .send(validTask)\n        .expect(200)\n        .end((err, res) => {\n          if (err) return done(err);\n          expect(res.body.message).to.equal(\"Task Saved Successfully\");\n          done();\n        });\n    });\n\n  });\n\n  describe('Add invalid Task: /task', () => {\n    it('should not be able to add a new task to a project by the authenticated user', (done) => {\n      request\n        .post('/tasks')\n        .set({authorization:token})\n        .send(invalidTask)\n        .expect(401)\n        .end((err, res) => {\n          if (err) return done(err);\n          done();\n        });\n    });\n\n\n  });\n\n  describe('Get Tasks GET: /tasks ', ()=>{\n    it('should get all tasks', (done)=>{\n      request\n      .get('/tasks')\n      .set({authorization:token})\n      .send({projectId:project._id})\n      .expect(200)\n      .end((err, res) => {\n        if (err) return done(err);\n        done();\n      });\n    });\n  });\n});\n"]}