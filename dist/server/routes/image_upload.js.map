{"version":3,"sources":["../../../routes/image_upload.js"],"names":["require","config","mongoose","Project","model","exports","new","req","res","successRes","success","failRes","projectObj","body","owner","userId","newProject","save","projErr","message","name","status","json","find","checkQuery","limit","parseInt","query","page","skip","otherQueryParams","tokenExists","exec","err","projects"],"mappings":"AAAA;;;;AACAA,QAAQ,QAAR,EAAkBC,MAAlB;AACA,IAAMC,WAAWF,QAAQ,UAAR,CAAjB;AAAA,IACEG,UAAUD,SAASE,KAAT,CAAe,SAAf,CADZ;AAECC,QAAQC,GAAR,GAAc,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC3B,MAAIC,aAAa,EAAEC,SAAS,IAAX,EAAjB;AACA,MAAIC,UAAU,EAAED,SAAS,KAAX,EAAd;AACA,MAAIE,aAAaL,IAAIM,IAArB;AACAD,aAAWE,KAAX,GAAmBP,IAAIQ,MAAvB;AACC,MAAIC,aAAa,IAAIb,OAAJ,CAAYS,UAAZ,CAAjB;AACDI,aAAWC,IAAX,CAAgB,mBAAW;AACzB,QAAIC,OAAJ,EAAa;AACXP,cAAQQ,OAAR,GAAkBD,QAAQE,IAAR,GAAe,IAAf,GAAsBF,QAAQC,OAAhD;AACA,aAAOX,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBX,OAArB,CAAP;AACD;AACD,WAAOH,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBb,UAArB,CAAP;AACD,GAND;AAOD,CAbA;AAcAJ,QAAQkB,IAAR;AAAA,qEAAe,iBAAOhB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,sBADU,GACG,EAAEC,SAAS,IAAX,EADH;AAEVC,mBAFU,GAEA,EAAED,SAAS,KAAX,EAFA;AAGVc,sBAHU,GAGG,EAHH;AAId;;AACIC,iBALU,GAKFC,SAASnB,IAAIoB,KAAJ,CAAUF,KAAV,GAAkBlB,IAAIoB,KAAJ,CAAUF,KAA5B,GAAoC,CAA7C,EAAgD,EAAhD,CALE;AAMd;;AACIG,gBAPU,GAOHrB,IAAIoB,KAAJ,CAAUC,IAAV,GAAiBrB,IAAIoB,KAAJ,CAAUC,IAA3B,GAAkC,CAP/B;AAQd;;AACIC,gBATU,GASHH,SAASE,OAAOH,KAAP,GAAeA,KAAxB,EAA+B,EAA/B,CATG;AAUd;;AACIK,4BAXU,GAWSvB,IAAIoB,KAXb;AAYd;;AACA,mBAAOG,iBAAiBL,KAAxB;AACA,mBAAOK,iBAAiBF,IAAxB;AACCJ,yBAAajB,IAAIwB,WAAJ,GACV,EAAED,kCAAF,EAAoBhB,OAAOP,IAAIQ,MAA/B,EADU,GAEVe,gBAFH;AAGA3B,oBAAQoB,IAAR,CAAaC,UAAb,EACEK,IADF,CACOA,IADP,EAEEJ,KAFF,CAEQA,KAFR,EAGEO,IAHF,CAGO,UAASC,GAAT,EAAcC,QAAd,EAAwB;AAC5B,kBAAID,GAAJ,EAAS;AACPtB,wBAAQQ,OAAR,GAAkBc,IAAId,OAAtB;AACA,uBAAOX,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBX,OAArB,CAAP;AACD;AACD,kBAAI,CAACuB,QAAL,EACE,OAAO1B,IAAIc,IAAJ,CAAS;AACdH,yBAAS;AADK,eAAT,CAAP;AAGDV,yBAAWyB,QAAX,GAAsBA,QAAtB;AACD,qBAAO1B,IAAIc,IAAJ,CAASb,UAAT,CAAP;AACD,aAdF;;AAlBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","file":"image_upload.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nconst mongoose = require(\"mongoose\"),\n  Project = mongoose.model(\"Project\");\n exports.new = (req, res) => {\n  var successRes = { success: true };\n  var failRes = { success: false };\n  var projectObj = req.body;\n  projectObj.owner = req.userId;\n   var newProject = new Project(projectObj);\n  newProject.save(projErr => {\n    if (projErr) {\n      failRes.message = projErr.name + \": \" + projErr.message;\n      return res.status(500).json(failRes);\n    }\n    return res.status(200).json(successRes);\n  });\n};\n exports.find = async (req, res) => {\n  var successRes = { success: true };\n  var failRes = { success: false };\n  var checkQuery = {};\n  // limit result else return all\n  let limit = parseInt(req.query.limit ? req.query.limit : 0, 10);\n  // pagination logic\n  let page = req.query.page ? req.query.page : 1;\n  // page hopping logic\n  let skip = parseInt(page * limit - limit, 10);\n  // let the remaining queries stay in the variable\n  let otherQueryParams = req.query;\n  // delete thes because they will affect the look up in the db\n  delete otherQueryParams.limit;\n  delete otherQueryParams.page;\n   checkQuery = req.tokenExists\n    ? { otherQueryParams, owner: req.userId }\n    : otherQueryParams;\n   Project.find(checkQuery)\n    .skip(skip)\n    .limit(limit)\n    .exec(function(err, projects) {\n      if (err) {\n        failRes.message = err.message;\n        return res.status(400).json(failRes);\n      }\n      if (!projects)\n        return res.json({\n          message: \"No Projects Found\"\n        });\n       successRes.projects = projects;\n      return res.json(successRes);\n    });\n};"]}