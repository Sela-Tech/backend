{"version":3,"sources":["../../../test/transaction.js"],"names":["chai","require","chaiHttp","supertest","app","insertUserSeed","validProject","generateToken","insertProject","validTrnInfo","invalidTrnInfo","mongoose","User","model","Organization","Project","Loc","Transaction","expect","request","token","user","project","use","describe","before","_id","projectId","after","remove","it","done","post","set","authorization","send","end","err","res","body","message","to","equal"],"mappings":"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","file":"transaction.js","sourcesContent":["const chai = require('chai');\nconst chaiHttp = require('chai-http');\nconst supertest = require('supertest');\nconst app = require('../sela_app');\nconst { insertUserSeed, validProject, generateToken, insertProject,validTrnInfo,\n    invalidTrnInfo\n} = require('./helpers/mockData')\nconst mongoose = require(\"mongoose\");\nconst User = mongoose.model(\"User\");\nconst Organization = mongoose.model('Organization');\nvar Project = mongoose.model(\"Project\");\nvar Loc = mongoose.model(\"Location\");\nconst Transaction = mongoose.model(\"Transaction\");\n\n\n\n\nconst expect = chai.expect;\nconst request = supertest(app);\nlet token = '';\nlet user = '';\nlet project = '';\nchai.use(chaiHttp);\n\n\ndescribe('Transaction(crypto) controller', () => {\n    before(async () => {\n\n        // seed a user into the db collection\n        user = await insertUserSeed();\n\n        //  generatee token for the seeded user\n        token = generateToken(user);\n\n        //    create project for the user\n        project = await insertProject(user._id);\n\n        // set the validTransaction projectId to the just inserted projectId\n        validTrnInfo.projectId= project._id;\n\n    });\n\n    after(async () => {\n        await User.remove({});\n        await Organization.remove({});\n        await Project.remove({});\n        await Loc.remove({});\n        await Transaction.remove({});\n    })\n\n    describe('Confirm Transaction: /trn', () => {\n        it('should successfully confirm a transaction', (done) => {\n            request\n                .post('/trn')\n                .set({ authorization: token })\n                .send(validTrnInfo)\n                .expect(200)\n                .end((err, res) => {\n                    if (err) return done(err);\n                    expect(res.body.message).to.equal(\"This Transaction Has Been Confirmed\");\n                    done();\n                });\n        });\n\n        it('should reject transaction with existing hash', (done) => {\n            request\n                .post('/trn')\n                .set({ authorization: token })\n                .send(validTrnInfo)\n                .expect(409)\n                .end((err, res) => {\n                    if (err) return done(err);\n                    expect(res.body.message).to.equal(\"This Transaction Has Already Been Recorded\");\n                    done();\n                });\n        });\n\n        it('should reject transaction with confirmation less than 30', (done) => {\n            request\n                .post('/trn')\n                .set({ authorization: token })\n                .send(invalidTrnInfo)//update invalidTrnInfo hash to a recent block hash from \n                .expect(403)            //ethersacn.io to obtain a transaction less than 3o confirmations\n                .end((err, res) => {    //before running this script\n                    if (err) return done(err);\n                    expect(res.body.message).to.equal(\"This Transaction Has Not Obtained Adequate Block Confirmations.\");\n                    done();\n                });\n        });\n\n    });\n\n\n\n});\n"]}