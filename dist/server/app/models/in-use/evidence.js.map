{"version":3,"sources":["../../../../../app/models/in-use/evidence.js"],"names":["mongoose","require","Schema","ObjectId","Types","autoPopulate","_","mongoosePaginate","schemaOptions","minimize","id","toJSON","getters","virtuals","versionKey","retainKeyOrder","toObject","timestamps","usePushEach","autoIndex","process","env","NODE_ENV","strict","evidenceStructure","title","type","String","required","project","ref","level","enum","default","task","autopopulate","select","instruction","totalPrice","Number","stakeholders","user","quote","hasSubmitted","Boolean","datatype","fields","responseType","submissions","Mixed","status","requestedBy","dueDate","Date","projectStructure","test","evidenceSchema","plugin","module","exports","model"],"mappings":"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","file":"evidence.js","sourcesContent":["var mongoose = require(\"mongoose\");\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.Types.ObjectId;\nvar autoPopulate = require(\"mongoose-autopopulate\");\nvar _ = require(\"underscore\");\nconst mongoosePaginate = require('mongoose-paginate');\n\n\n\nvar schemaOptions = {\n    minimize: false,\n    id: false,\n    toJSON: {\n        getters: true,\n        virtuals: true,\n        minimize: false,\n        versionKey: false,\n        retainKeyOrder: true\n    },\n    toObject: {\n        getters: true,\n        virtuals: true,\n        minimize: false,\n        versionKey: false,\n        retainKeyOrder: true\n    },\n    timestamps: true,\n    usePushEach: true,\n    autoIndex: process.env.NODE_ENV === \"development\",\n    strict: process.env.NODE_ENV !== \"development\"\n};\n\nconst evidenceStructure = {\n    title: {\n        type: String,\n        required: true\n    },\n    project: {\n        type: ObjectId,\n        ref: \"Project\",\n        // autopopulate: {\n        //     select:\n        //         \"name activated _id, owner \"\n        // }\n    },\n\n    level: {\n        type: String,\n        enum: [\"project\", \"task\"],\n        default: \"task\"\n    },\n    task: {                 // can be null or not null depending on the level(project or task)\n        type: ObjectId,\n        ref: \"Task\",\n        autopopulate: {\n            select:\n                \"name _id\"\n        },\n        default: null\n    },\n\n    instruction: {\n        type: String,\n        default: \"\"\n    },\n\n    totalPrice: {\n        type: Number,\n        default: 0\n    },\n\n    stakeholders: [\n        {\n            user: {\n                type: ObjectId,\n                ref: \"User\",\n                default: null,\n                autopopulate: {\n                    select:\n                        \"firstName lastName _id profilePhoto\"\n                }\n            },\n            quote: {\n                type: Number,\n                default: 0\n            },\n            hasSubmitted: {\n                type: Boolean,\n                default: false\n            }\n        }\n    ],\n    datatype: {\n        type: String,\n        enum: [\"video\", \"audio\", \"image\", \"table\", \"survey\"]\n    },\n    // if graphical data, the field below is useful\n    fields: [\n        {\n            title: {\n                type: String\n            },\n            responseType: {\n                type: String\n            }\n        }\n\n    ],\n    // if graphical data, the field above is useful\n\n    submissions: {\n        type: [mongoose.Schema.Types.Mixed] //an array of mixed data types\n    }, // anything can be thrown here regardless of data type e.g string, Number, object\n\n    status: {\n        type: String,\n        enum: [\"Pending\", \"Submitted\", \"In Progess\", \"Completed\"],\n        default: \"Pending\"\n    },\n\n    requestedBy: {\n        type: ObjectId,\n        ref: \"User\",\n        default: null,\n        autopopulate: {\n            select:\n                \"firstName lastName _id profilePhoto\"\n        }\n    },\n\n    dueDate: {\n        type: Date,\n        default: null\n    }\n\n\n};\n\n\nif (process.env.NODE_ENV === \"development\") {\n    projectStructure.test = {\n        type: Boolean,\n        default: true\n    };\n}\n\n\nvar evidenceSchema = new Schema(evidenceStructure, schemaOptions);\nevidenceSchema.plugin(autoPopulate);\nevidenceSchema.plugin(mongoosePaginate);\n\nmodule.exports = mongoose.model(\"Evidence\", evidenceSchema);\n"]}