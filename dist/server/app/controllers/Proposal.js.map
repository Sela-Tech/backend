{"version":3,"sources":["../../../../app/controllers/Proposal.js"],"names":["require","config","mongoose","Task","model","Project","Proposal","User","Milestone","validate","_","noticate","AccessControl","grantsObject","Helper","helper","ac","Proposals","user","fullName","firstName","lastName","_id","profilePhoto","req","res","body","projectId","comments","milestones","contractor","proposal_name","role","getRole","roles","permission","can","createOwn","granted","findById","project","status","json","message","findOne","proposedBy","userId","existingProposal","owner","toString","length","map","milestone","tasks","task","createdBy","estimatedCost","amount","dueDate","deadline","isInMilestone","assignedTo","insertMany","taskIds","title","name","save","Promise","all","milestonesIds","proposalObj","proposalName","comment","actor","proposal","notifyOnSubmitProposal","approved","notifyOnAssignedToProposal","console","log","params","id","find","sort","createdAt","proposals","p","totalMilestones","Array","prototype","concat","apply","m","totalTasks","reduce","x","y","totalBudget","t","a","b","populateUser","completed","description","projectStakeholders","stakeholders","projectStakeholder","c","information","undefined","Object","getOwnPropertyNames","updateOne","$push","messge","acceptOrRejectProposal","$set","contractorId","proposalId","updateOwn","assingedProposal","updateMany","module","exports"],"mappings":"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","file":"Proposal.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nconst mongoose = require(\"mongoose\"),\n    Task = mongoose.model(\"Task\"),\n    Project = mongoose.model(\"Project\"),\n    Proposal = mongoose.model(\"Proposal\"),\n    User = mongoose.model(\"User\"),\n    Milestone = mongoose.model('Milestone');\nconst validate = require('../../middleware/validate');\nconst _ = require('lodash');\nconst noticate = require('../helper/notifications');\nconst { AccessControl } = require('accesscontrol');\n\nconst grantsObject = require('../helper/access_control');\nconst Helper = require('../helper/helper');\n\n\nconst helper = new Helper();\nconst ac = new AccessControl(grantsObject);\n\nclass Proposals {\n\n    // constructor() {\n    //     this.populateUser = this.populateUser.bind(this)\n    // }\n\n    static populateUser(user) {\n        if (user == null) {\n            return null\n        }\n        return {\n            fullName: `${user.firstName} ${user.lastName}`,\n            _id: user._id,\n            profilePhoto: user.profilePhoto\n        }\n    }\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Proposals\n     */\n\n    static async submitProposal(req, res) {\n        let { body: { projectId, comments, milestones, contractor, proposal_name } } = req;\n\n        const role = helper.getRole(req.roles);\n\n        const permission = ac.can(role).createOwn('proposal').granted;\n\n        if (permission) {\n\n            try {\n\n                // check of project exist\n                let project = await Project.findById(projectId);\n\n                if (!project) {\n                    return res.status(404).json({ message: 'Project Not Found.' })\n                }\n\n                let existingProposal = await Proposal.findOne({ project: projectId, proposedBy: req.userId });\n\n                if (existingProposal && project.owner._id.toString() !== req.userId) {\n                    return res.status(403).json({ message: \"You have already submitted a proposal for this project.\" })\n                }\n\n\n                if (milestones.length < 1) {\n                    return res.status(403).json({ message: \"You cannot submit an empty proposal.\\n Start by creating tasks and milestones\" })\n                }\n\n                if (req.userId === project.owner._id.toString() && contractor && contractor === req.userId) {\n                    return res.status(403).json({ message: \"You cannot assign a proposal to Yourself\" })\n                }\n\n                milestones = milestones.map(async (milestone) => {\n                    let tasks = milestone.tasks.map((task) => {\n\n                        if (req.userId === project.owner._id.toString()) {\n                            task.createdBy = req.userId;\n                            task.estimatedCost = task.amount;\n                            task.project = projectId;\n                            task.dueDate = task.deadline;\n                            task.isInMilestone = true;\n                            contractor && contractor.length !== \"\" ? task.assignedTo = contractor : task.assignedTo = null;\n                            contractor && contractor.length !== \"\" ? task.status = \"ASSIGNED\" : task.status = \"UNASSIGNED\";\n\n                        } else {\n                            task.assignedTo = req.userId;\n                            task.createdBy = req.userId;\n                            task.estimatedCost = task.amount;\n                            task.project = projectId;\n                            task.dueDate = task.deadline;\n                            task.status = 'ASSIGNED';\n                            task.isInMilestone = true;\n                        }\n\n                        return task;\n                    });\n\n                    let taskIds = await Task.insertMany(tasks);\n\n                    milestone.createdBy = req.userId;\n                    milestone.title = milestone.name;\n                    milestone.project = projectId;\n                    milestone.tasks = [...taskIds];\n\n                    milestone = await new Milestone(milestone).save();\n                    return milestone;\n                });\n\n\n                let milestonesIds = await Promise.all(milestones)\n                milestonesIds = milestonesIds.map(milestone => milestone._id);\n\n                const proposalObj = {\n                    proposalName: proposal_name,\n                    project: projectId,\n                    milestones: [...milestonesIds],\n                    proposedBy: req.userId\n                }\n\n                if (comments && comments.length > 0) {\n                    proposalObj.comments = comments.map((comment) => {\n                        return {\n                            actor: req.userId,\n                            comment: comment\n                        }\n                    })\n                } else {\n                    proposalObj.comments = [];\n                }\n\n                let proposal = await new Proposal(proposalObj).save();\n\n                if (req.userId !== project.owner._id.toString()) {\n                    proposal.assignedTo = req.userId;\n                    await proposal.save();\n                    // send notification to project owner\n                    await noticate.notifyOnSubmitProposal(req, project, proposal);\n                } else if (req.userId === project.owner._id.toString() && !contractor || contractor === \"\") {\n                    proposal.approved = true;\n                    proposal.status = \"APPROVED\";\n                    await proposal.save();\n\n                    // push proposal into the project\n\n                    // project.proposals.push(proposal._id);\n                    // await project.save();\n\n\n                } else if (req.userId === project.owner._id.toString() && contractor && contractor !== \"\") {\n                    proposal.assignedTo = contractor;\n                    proposal.approved = true;\n                    proposal.status = \"APPROVED\";\n                    await proposal.save();\n\n                    // push proposal into the project\n\n                    // project.proposals.push(proposal._id);\n                    // await project.save();\n\n\n\n                    // send contractor a notification about been added to a project\n                    await noticate.notifyOnAssignedToProposal(req, project, proposal, contractor)\n                }\n\n                return res.status(201).json({ proposal });\n\n\n            } catch (error) {\n                console.log(error);\n                return res.status(501).json({\n                    message: error.message\n                });\n            }\n\n        } else {\n            return res.status(403).json({ message: \"Forbidden\" })\n        }\n\n    }\n\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns {object}\n     * @memberof Proposals\n     * @description returns an array of proposals submitted against a project\n     */\n    static async getprojectProposals(req, res) {\n        let project = req.params.id;\n\n        try {\n            let proposals = await Proposal.find({ project }).sort({ createdAt: -1 });\n            if (proposals.length < 1) {\n                return res.status(200).json({ proposals: [] })\n            }\n\n            proposals = proposals.map((p) => {\n                return {\n                    _id: p._id,\n\n                    proposal_name: p.proposalName,\n                    totalMilestones: p.milestones.length,\n                    tasks:Array.prototype.concat.apply([], p.milestones.map((m)=>{\n                        return m.tasks;\n                    })),\n                    \n                    totalTasks: p.milestones.map((m) => {\n                        return m.tasks.length\n                    }).reduce((x, y) => x + y),\n\n                    totalBudget: p.milestones.map((m) => {\n                        return m.tasks.map((t) => {\n                            return t.estimatedCost\n                        }).reduce((x, y) => x + y);\n                    }).reduce((a, b) => a + b),\n\n                    proposedBy: Proposals.populateUser(p.proposedBy),\n                    assignedTo: Proposals.populateUser(p.assignedTo),\n                    status: p.status,\n                    approved: p.approved\n                }\n            })\n            return res.status(200).json({ proposals })\n        } catch (error) {\n            console.log(error);\n            return res.status(501).json({\n                message: error.message\n            });\n        }\n    }\n\n\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Proposals\n     */\n    static async getProposalDetail(req, res) {\n        const { id } = req.params;\n        try {\n            let proposal = await Proposal.findById(id);\n            if (!proposal) {\n                return res.status(404).json({ message: \"Proposal Not Found\" });\n            }\n\n            proposal = {\n                id: proposal._id,\n                proposal_name: proposal.proposalName,\n                milestones: proposal.milestones.map((milestone) => {\n                    return {\n                        id: milestone._id,\n                        title: milestone.title,\n                        completed: milestone.completed,\n                        totalBudget: milestone.tasks.map((task) => {\n                            return task.estimatedCost;\n                        }).reduce((x, y) => x + y),\n                        tasks: milestone.tasks.map((task) => {\n                            return {\n                                id: task._id,\n                                name: task.name,\n                                description: task.description,\n                                estimatedCost: task.estimatedCost,\n                                dueDate: task.dueDate\n                            }\n                        })\n                    }\n                }),\n                status: proposal.status,\n                approved: proposal.approved,\n                proposedBy: Proposals.populateUser(proposal.proposedBy),\n                assignedTo: Proposals.populateUser(proposal.assignedTo),\n                comments: proposal.comments.map((comment) => {\n                    return {\n                        actor: {\n                            id: comment.actor._id,\n                            firstName: comment.actor.firstName,\n                            lastName: comment.actor.lastName,\n                            profilePhoto: comment.actor.profilePhoto\n                        },\n                        comment: comment.comment,\n                        createdAt: comment.createdAt\n                    }\n                })\n\n            }\n\n            return res.status(200).json({ proposal });\n        } catch (error) {\n            console.log(error);\n            return res.status(501).json({\n                message: error.message\n            });\n        }\n\n    }\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns {object}\n     * @memberof Proposals\n     */\n    static async getContractorProposals(req, res) {\n        let project = req.params.id;\n\n        // try {\n        //     let proposals = await Proposal.find({ project, proposedBy: req.userId }).sort({ createdAt: -1 });\n        //     if (proposals.length < 1) {\n        //         return res.status(200).json({ proposals: [] })\n        //     }\n\n        //     proposals = proposals.map((p) => {\n        //         return {\n        //             id: 'p._id',\n\n        //             totalMilestones: p.milestones.length,\n\n        //             totalTasks: p.milestones.map((m) => {\n        //                 return m.tasks.length\n        //             }).reduce((x, y) => x + y),\n\n        //             totalBudget: p.milestones.map((m) => {\n        //                 return m.tasks.map((t) => {\n        //                     return t.estimatedCost\n        //                 }).reduce((x, y) => x + y);\n        //             }).reduce((a, b) => a + b),\n\n        //             proposedBy: {\n        //                 fullName: `${p.proposedBy.firstName} ${p.proposedBy.lastName}`,\n        //                 _id: p.proposedBy._id\n        //             },\n        //         }\n        //     })\n        //     return res.status(200).json({ proposals })\n        // } catch (error) {\n        //     console.log(error);\n        //     return res.status(501).json({\n        //         message: error.message\n        //     });\n        // }\n    }\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Proposals\n     * @description accepts or rejects proposal submited against a project\n     */\n    static async acceptOrRejectProposal(req, res) {\n        const { body: { approved, projectId } } = req;\n        try {\n\n            let project = await Project.findById(projectId);\n\n            if (!project) {\n                return res.status(404).json({ message: 'Project Not Found.' })\n            }\n\n            let proposal = await Proposal.findOne({ _id: req.params.id, project: projectId });\n            if (!proposal) {\n                return res.status(404).json({ message: \"Proposal Not Found\" });\n            }\n\n            if (project.owner._id.toString() !== req.userId) {\n                return res.status(403).json({ message: \"You don't have the permission.\" });\n            }\n\n            const projectStakeholders = project.stakeholders\n\n            // check if proposal owner is a stakeholder\n            const projectStakeholder = projectStakeholders.find(c => c.user.information._id.toString() === proposal.proposedBy._id.toString());\n\n            if (approved === true) {\n\n                // check if proposal has been initially approved\n                if (proposal.approved) {\n                    return res.status(409).json({ message: \"You have already approved this proposal.\" });\n                }\n\n                //approve the proposal\n\n                proposal.approved = approved;\n                proposal.status = \"APPROVED\";\n\n                await proposal.save();\n\n                //    if proposal owner do not belong to project stakeholders\n                if (projectStakeholder === undefined || Object.getOwnPropertyNames(projectStakeholder).length === 0) {\n\n                    // add him to the list of stakeholders\n                    await Project.updateOne({ _id: projectId },\n                        {\n                            $push: {\n                                stakeholders: {\n                                    'user.information': proposal.proposedBy._id, 'user.status': \"ACCEPTED\",\n                                    'user.agreed': true\n                                },\n                               // proposals: { _id: proposal._id }\n\n                            }\n\n                        });\n\n                    // **notify the proposal owner about his proposal status***\n                    return res.json({ messge: 'Proposal accepted. \\n The contractor has been added to the project\\'s stakeholders' })\n                }\n\n                switch (projectStakeholder.user.status) {\n                    case \"ACCEPTED\":\n\n                        // await Project.updateOne({ _id: projectId }, { $push: { proposals: { _id: proposal._id } } });\n                        // send notification here\n\n                        await noticate.acceptOrRejectProposal(req, project, proposal, approved, null);\n                        return res.status(200).json({ message: `${proposal.proposedBy.firstName} ${proposal.proposedBy.lastName}'s proposal approved.` })\n\n                    case \"PENDING\":\n\n                        await Project.updateOne({\n                            _id: projectId,\n                            'stakeholders.user.information': proposal.proposedBy._id\n                        },\n                            {\n                                $set: { 'stakeholders.$.user.status': \"ACCEPTED\", 'stakeholders.$.user.agreed': true },\n                                // $push: { proposals: { _id: proposal._id } }\n                            });\n\n                        // send notification here\n                        //  update contractor notification to \"ACCEPTED\"\n                        await noticate.acceptOrRejectProposal(req, project, proposal, approved, projectStakeholder.user.status);\n\n                        return res.status(200).json({ message: `${proposal.proposedBy.firstName} ${proposal.proposedBy.lastName}'s proposal approved.` })\n\n\n                    case \"DECLINED\":\n\n                        await Project.updateOne({\n                            _id: projectId,\n                            'stakeholders.user.information': proposal.proposedBy._id\n                        },\n                            {\n                                $set: { 'stakeholders.$.user.status': \"ACCEPTED\", 'stakeholders.$.user.agreed': true },\n                                // $push: { proposals: { _id: proposal._id } }\n                            });\n\n                        // send notification here\n                        //  update contractor notification to \"ACCEPTED\"\n                        await noticate.acceptOrRejectProposal(req, project, proposal, approved, projectStakeholder.user.status)\n\n                        return res.status(200).json({ message: `${proposal.proposedBy.firstName} ${proposal.proposedBy.lastName}'s proposal approved.` })\n\n                    default:\n                        break;\n                }\n\n\n            }\n\n            proposal.approved = approved;\n            proposal.status = \"REVERTED\"; //declined or revert\n\n            await proposal.save();\n\n            // await Project.updateOne({ _id: projectId }, { $pull: { proposals: { _id: proposal._id } } }, { 'new': true });\n            // let project = await Project.findById(projectId);\n            // project.proposals.pull({ _id: proposal._id });\n            // await project.save();\n\n            await noticate.acceptOrRejectProposal(req, project, proposal, approved, null)\n\n            return res.status(200).json({ message: `${proposal.proposedBy.firstName} ${proposal.proposedBy.lastName}'s proposal reverted.` })\n        } catch (error) {\n            console.log(error);\n            return res.status(501).json({\n                message: error.message\n            });\n        }\n    }\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Proposals\n     */\n    static async assignProposalToContractor(req, res) {\n        const { contractorId, proposalId, projectId } = req.body;\n        const role = helper.getRole(req.roles)\n        const permission = ac.can(role).updateOwn('proposal').granted;\n        if (permission) {\n            try {\n\n                let project = await Project.findById(projectId);\n\n                if (project.owner._id.toString() !== req.userId) {\n                    return res.status(401).json({ message: \"You are not authorized to perform this operation\" });\n                }\n\n                let proposal = await Proposal.findOne({ _id: proposalId, proposedBy: req.userId });\n\n                if (!proposal) {\n                    return res.status(404).json({ message: \"Proposal Not Found\" });\n                }\n\n\n                if (proposal.assignedTo !== null && proposal.assignedTo._id.toString() === contractorId) {\n                    return res.status(409).json({ message: \"You have already assigned this contractor to this proposal\" });\n                }\n\n                proposal.assignedTo = contractorId;\n                let assingedProposal = await proposal.save();\n\n                if (assingedProposal) {\n                    //    assign every task in this proposal to the contractor\n                    await Task.updateMany({ createdBy: req.userId, project: projectId }, { $set: { assignedTo: contractorId, status: \"ASSIGNED\" } });\n\n                    // send contractor a notification\n                    await noticate.notifyOnAssignedToProposal(req, project, proposal, contractorId)\n                    return res.status(200).json({ message: `You successfully assigned a contractor to this proposal.` });\n                }\n            } catch (error) {\n                console.log(error);\n                return res.status(501).json({\n                    message: error.message\n                });\n            }\n\n        } else {\n            return res.status(403).json({ message: \"Forbidden\" })\n        }\n    }\n}\n\nmodule.exports = { Proposals }"]}