{"version":3,"sources":["../../../../app/helper/notifications.js"],"names":["sgMail","require","mongoose","Notification","model","User","Helper","EmailTemplates","getHost","NotificationController","helper","options","apiKey","process","env","AFRICAS_TALKING_API","username","AFRICAS_TALKING_APP_USERNAME","AfricasTalking","setApiKey","SEND_GRID_API","sms","SMS","Notifications","req","receiver","token","msg","to","email","from","sela_email","subject","html","confirmEmail","send","error","result","console","log","welcomeEmail","firstName","data","type","acceptInvite","rejectInvite","message","accepted","stakeholderName","project","name","rejected","msgTemplate","msgTemplateAccepted","msgTemplateRejected","agreed","notifObj","_id","user","owner","stakeholder","stakeholderId","notificationId","action","updateOne","userId","$set","save","notification","socket","io","sockets","connected","getUserNViaSocket","notifications","emit","photo","stakeHolderPhoto","stakeholderInvitationStatus","role","roles","userRole","decodedTokenData","lastName","message1","status","usersData","find","users","notifObjs","map","u","notifyOwner","length","insertMany","nots","forEach","notiOwner","inviteToJoinProject","proposal","notificationObj","onModel","newProposal","isApproved","option","approveProposal","revertProposal","approved","reverted","msgTemplateApproved","msgTemplateReverted","proposedBy","proposalStatus","contractorId","findById","contractor","assignedproposal","module","exports"],"mappings":"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","file":"notifications.js","sourcesContent":["const sgMail = require('@sendgrid/mail');\nlet mongoose = require(\"mongoose\");\nlet Notification = mongoose.model(\"Notification\"),\n    User = mongoose.model(\"User\");\nconst Helper = require('../helper/helper');\nconst EmailTemplates = require('../helper/emailTemplates');\nconst { getHost } = require('../../in-use/utils');\nconst NotificationController = require('../controllers/Notification');\nconst helper = new Helper();\n\n\nconst options = {\n    apiKey: process.env.AFRICAS_TALKING_API,\n    username: process.env.AFRICAS_TALKING_APP_USERNAME\n};\n\nconst AfricasTalking = require('africastalking')(options);\n\n\nsgMail.setApiKey(process.env.SEND_GRID_API);\n\nlet sms = AfricasTalking.SMS;\n\n\nclass Notifications {\n\n\n    /**\n     *\n     *\n     * @param {*} req\n     * @param {*} receiver\n     * @memberof Notifications\n     */\n\n    confirmEmail(req, receiver, token) {\n        const msg = {\n            to: `${receiver.email}`,\n            from: 'Sela Labs' + '<' + `${process.env.sela_email}` + '>',\n            subject: \"Confirm Email\",\n            html: EmailTemplates.confirmEmail(getHost(req), token)\n        };\n\n        sgMail.send(msg, false, (error, result) => {\n            if (error) return console.log(error);\n\n            // console.log(result);\n        });\n    }\n\n\n    /**\n     *\n     *\n     * @param {*} receiver\n     * @param {*} sender\n     * @memberof Notifications\n     */\n\n    welcomeMail(req, receiver) {\n        // const url = 'sela.now.sh';\n        // const message = '<p>Welcome to Sela, ' + '<b>' + receiver.firstName + '</b>' + '! We\\'re excited' +\n        //     ' to have you join our community of Sela Citizens.</p>' +\n        //     '<p><a href =\"' + getHost(req) + '/signin' + '\">Click here' + '</a> to visit your account.</p>' +\n        //     '<p>Have questions? We\\'re happy to help! Feel free to reply to this email</p>'\n        const msg = {\n            to: `${receiver.email}`,\n            from: 'Sela Labs' + '<' + `${process.env.sela_email}` + '>',\n            subject: \"Welcome to Sela\",\n            html: EmailTemplates.welcomeEmail(getHost(req), receiver.firstName)\n        };\n\n        sgMail.send(msg, false, (error, result) => {\n            if (error) return console.log(error);\n\n            // console.log(result);\n        });\n    }\n\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} data\n     * @memberof Notifications\n     */\n\n    static async notifyAcceptance(req, data) {\n        let type = '';\n        let acceptInvite = \"ACCEPT_INVITE_TO_JOIN_PROJECT\";\n        let rejectInvite = \"REJECT_INVITE_TO_JOIN_PROJECT\";\n\n        let message = '';\n        let accepted = `${data.stakeholderName} has accepted your invite to join the \"${data.project.name}\" project`;\n        let rejected = `${data.stakeholderName} declined your invite to join the \"${data.project.name}\" project`;\n\n        let msgTemplate = '';\n        let msgTemplateAccepted = 'has accepted your invite to join the'\n        let msgTemplateRejected = 'declined your invite to join the';\n\n        data.agreed === true ? message = accepted : message = rejected;\n\n        data.agreed === true ? type = acceptInvite : type = rejectInvite;\n\n        data.agreed === true ? msgTemplate = msgTemplateAccepted : msgTemplate = msgTemplateRejected;\n\n        const notifObj = {\n            project: data.project._id,\n            user: data.project.owner._id,\n            message,\n            stakeholder: data.stakeholderId,\n            type\n        }\n\n        try {\n            //update user existing notification\n            if (data.notificationId) {\n                let action;\n                data.agreed === true ? action = \"ACCEPTED\" : action = \"REJECTED\";\n                await Notification.updateOne({ _id: data.notificationId, user: req.userId }, { $set: { action: action } });\n            }\n            let notification = await new Notification(notifObj).save();\n\n            if (notification) {\n\n                if (data.project.owner.socket !== null) {\n                    if (req.io.sockets.connected[data.project.owner.socket]) {\n                        const notifications = await NotificationController.getUserNViaSocket({ userId: data.project.owner._id })\n                        req.io.sockets.connected[data.project.owner.socket].emit('notifications', { notifications });\n                    }\n                }\n\n                const user = {\n                    name: data.stakeholderName,\n                    photo: data.stakeHolderPhoto\n                };\n                const msg = {\n                    to: `${data.project.owner.email}`,\n                    from: 'Sela Labs' + '<' + `${process.env.sela_email}` + '>',\n                    subject: \"Project Invitation Status\",\n                    html: EmailTemplates.stakeholderInvitationStatus(getHost(req), msgTemplate, data.project, user)\n                };\n\n\n                await sgMail.send(msg);\n            }\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} project\n     * @returns\n     * @memberof Notifications\n     */\n\n    static async notifyRequestToJoinP(req, project) {\n        const role = req.roles[0];\n\n        let userRole;\n        let type = \"REQUEST_TO_JOIN_PROJECT\";\n        role == 'isFunder' ? userRole = 'a funder' : role == 'isContractor' ? userRole = 'a contractor' : userRole = 'an evaluator';\n\n        const message = `${req.decodedTokenData.firstName} ${req.decodedTokenData.lastName} has requested to join your project \"${project.name}\" as ${userRole}`;\n\n        const message1 = '<b>' + req.decodedTokenData.firstName + ' ' + req.decodedTokenData.lastName + '</b>' +\n            ' has requested to join your project \"' + project.name + '\" as ' + userRole + '<br/>' +\n            '<a href =\"' + getHost(req) + '/project/stakeholder?id=' + req.userId + '\">Confirm Acceptance' + '</a>';\n\n        const notifObj = {\n            project: project._id,\n            user: project.owner._id,\n            message,\n            stakeholder: req.userId,\n            type,\n            action: \"REQUIRED\"\n        }\n\n        try {\n            // check if the project owner is a contractor and the stakeholder is an evaluator\n            // if project owner is a contractor, send notifications to the funders in the project instead\n            // if there are no funders on the project what happens\n            // if(role.includes('isContractor') && helper.getRole(project.owner) === 'Contractor'){\n            //     let projectStakeHolders=\n            // }\n            let notification = await new Notification(notifObj).save();\n\n            if (notification) {\n\n                if (project.owner.socket !== null) {\n                    if (req.io.sockets.connected[project.owner.socket]) {\n                        const notifications = await NotificationController.getUserNViaSocket({ userId: project.owner._id })\n                        req.io.sockets.connected[project.owner.socket].emit('notifications', { notifications });\n                    }\n                }\n\n\n                const msg = {\n                    to: `${project.owner.email}`,\n                    from: 'Sela Labs' + '<' + `${process.env.sela_email}` + '>',\n                    subject: \"Request To Join Project\",\n                    html: message1\n                };\n\n                await sgMail.send(msg);\n                return {status:true, message:`Your request to join the \"${project.name}\" project has been sent`}\n            }\n            return {status:false, message:`Your request to join the\"${project.name}\" project was not successful`}\n\n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} usersData\n     * @param {*} project\n     * @memberof Notifications\n     */\n    static async notifyAddedStakeholders(req, usersData, project) {\n        try {\n\n            let users = await User.find({ _id: [...usersData] });\n            let notifObjs = users.map((u) => {\n                const message = `${project.owner.firstName} ${project.owner.lastName} added you to the project \"${project.name}\"`\n                return {\n                    project: project._id,\n                    user: u._id,\n                    message,\n                    type: \"INVITATION_TO_JOIN_PROJECT\",\n                    stakeholder: project.owner._id,\n                    action: \"REQUIRED\"\n                }\n            })\n\n            let notifyOwner = users.map((u) => {\n                const message = `You sent a request to ${u.firstName} ${u.lastName} to join this project \"${project.name}\".`;\n                return {\n                    project: project._id,\n                    user: project.owner._id,\n                    message,\n                    stakeholder: u._id,\n                    type: \"YOU_SENT_INVITATION_TO_JOIN\"\n                }\n\n            })\n\n            if (notifObjs.length > 0) {\n                let nots = await Notification.insertMany(notifObjs);\n                if (nots) {\n\n                    users.forEach(async (u) => {\n                        if (u.socket !== null) {\n                            if (req.io.sockets.connected[u.socket]) {\n                                const notifications = await NotificationController.getUserNViaSocket({ userId: u._id })\n                                req.io.sockets.connected[u.socket].emit('notifications', { notifications });\n                            }\n                        }\n                    })\n\n\n                    let notiOwner = await Notification.insertMany(notifyOwner);\n\n                    if (notiOwner) {\n                        if (req.io.sockets.connected[project.owner.socket]) {\n                            const notifications = await NotificationController.getUserNViaSocket({ userId: project.owner._id })\n                            req.io.sockets.connected[project.owner.socket].emit('notifications', { notifications });\n                        }\n                    }\n\n                    users.forEach(user => {\n                        const msg = {\n                            to: `${user.email}`,\n                            from: 'Sela Labs' + '<' + `${process.env.sela_email}` + '>',\n                            subject: \"Invitation to join project!\",\n                            html: EmailTemplates.inviteToJoinProject(getHost(req), project, user)\n                        };\n                        sgMail.send(msg, false, (error, result) => {\n                            if (error) return console.log(error);\n\n                            // console.log(result);\n                        });\n                    });\n                }\n            }\n        } catch (error) {\n            console.log(error)\n        }\n\n\n    }\n\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} project\n     * @param {*} proposal\n     * @memberof Notifications\n     */\n    static async notifyOnSubmitProposal(req, project, proposal) {\n\n        const message = `${req.decodedTokenData.firstName} ${req.decodedTokenData.lastName} submitted a proposal for your project, \"${project.name}\"`;\n        const type = \"NEW_PROPOSAL\";\n\n        const notificationObj = {\n            project: project._id,\n            user: project.owner._id,\n            message,\n            stakeholder: req.userId,\n            type,\n            model: proposal._id,\n            onModel: \"Proposal\"\n        }\n\n        const msg = {\n            to: `${project.owner.email}`,\n            from: 'Sela Labs' + '<' + `${process.env.sela_email}` + '>',\n            subject: \"New Proposal\",\n            html: EmailTemplates.newProposal(getHost(req), project, req.decodedTokenData, proposal)\n        };\n\n        try {\n            let notification = await new Notification(notificationObj).save();\n\n            if (notification) {\n                if (project.owner.socket !== null) {\n                    if (req.io.sockets.connected[project.owner.socket]) {\n                        const notifications = await NotificationController.getUserNViaSocket({ userId: project.owner._id })\n                        req.io.sockets.connected[project.owner.socket].emit('notifications', { notifications });\n                    }\n                }\n\n                await sgMail.send(msg);\n\n            }\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    static async acceptOrRejectProposal(req, project, proposal, isApproved, option) {\n        let type = '';\n        let approveProposal = \"PROPOSAL_APPROVED\";\n        let revertProposal = \"PROPOSAL_REVERTED\";\n\n        let message = '';\n        let approved = `${project.owner.firstName} ${project.owner.lastName} approved your proposal for the \"${project.name}\" project`;\n        let reverted = `${project.owner.firstName} ${project.owner.lastName} reverted your proposal for the \"${project.name}\" project`;\n\n        let msgTemplate = '';\n        let msgTemplateApproved = 'approved your proposal for the'\n        let msgTemplateReverted = 'reverted your proposal for the';\n\n        isApproved === true ? message = approved : message = reverted;\n\n        isApproved === true ? type = approveProposal : type = revertProposal;\n\n        isApproved === true ? msgTemplate = msgTemplateApproved : msgTemplate = msgTemplateReverted;\n\n        const notifObj = {\n            project: project._id,\n            user: proposal.proposedBy._id,\n            message,\n            stakeholder: project.owner._id,\n            type,\n            model: proposal._id,\n            onModel: \"Proposal\"\n        }\n\n        try {\n            if (option !== null) {\n                await Notification.updateOne({ project: project._id, user: proposal.proposedBy._id, stakeholder: project.owner._id, type: \"INVITATION_TO_JOIN_PROJECT\" },\n                    { $set: { action: \"ACCEPTED\" } }\n                )\n                // console.log('ran this code');\n            }\n\n            let notification = await new Notification(notifObj).save();\n            if (notification) {\n                if (proposal.proposedBy.socket !== null) {\n                    if (req.io.sockets.connected[proposal.proposedBy.socket]) {\n                        const notifications = await NotificationController.getUserNViaSocket({ userId: proposal.proposedBy._id })\n                        req.io.sockets.connected[proposal.proposedBy.socket].emit('notifications', { notifications });\n                    }\n                }\n\n\n                const msg = {\n                    to: `${proposal.proposedBy.email}`,\n                    from: 'Sela Labs' + '<' + `${process.env.sela_email}` + '>',\n                    subject: \"Proposal Status\",\n                    html: EmailTemplates.proposalStatus(getHost(req), msgTemplate, project, proposal.proposedBy,proposal)\n                };\n\n\n                await sgMail.send(msg);\n\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    static async notifyOnAssignedToProposal(req,project, proposal, contractorId){\n        const message = `${req.decodedTokenData.firstName} ${req.decodedTokenData.lastName} assigned you to a proposal for project, \"${project.name}\"`;\n        const type = \"PROPOSAL_ASSIGNED\";\n\n        const notificationObj = {\n            project: project._id,\n            user: contractorId,\n            message,\n            stakeholder: project.owner._id,\n            type,\n            model: proposal._id,\n            onModel: \"Proposal\"\n        }\n\n       \n\n        try {\n            let contractor = await User.findById(contractorId);\n\n            const msg = {\n                to: `${contractor.email}`,\n                from: 'Sela Labs' + '<' + `${process.env.sela_email}` + '>',\n                subject: \"You Have Been Assigned a Proposal\",\n                html: EmailTemplates.assignedproposal(getHost(req), project,contractor, proposal)\n            };\n\n            let notification = await new Notification(notificationObj).save();\n\n            if (notification) {\n                if (contractor.socket !== null) {\n                    if (req.io.sockets.connected[contractor.socket]) {\n                        const notifications = await NotificationController.getUserNViaSocket({ userId: contractor._id })\n                        req.io.sockets.connected[contractor.socket].emit('notifications', { notifications });\n                    }\n                }\n\n                await sgMail.send(msg);\n\n            }\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n}\n\nmodule.exports = Notifications;"]}