{"version":3,"sources":["../../../../app/controllers/document.js"],"names":["require","config","mongoose","Document","model","Project","AccessControl","grantsObject","Helper","helper","ac","exports","new","req","res","docObj","name","body","filetype","doc","project","projectId","filesize","save","saveDocument","Boolean","findOne","_id","owner","userId","console","log","toJSON","collectionOfDocIds","documents","length","map","t","update","$set","updateRequest","n","status","json","message","findAll","find","params","id","findReq","success","info"],"mappings":"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","file":"document.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nconst mongoose = require(\"mongoose\"),\n  Document = mongoose.model(\"Document\"),\n  Project = mongoose.model(\"Project\");\n\nconst { AccessControl } = require('accesscontrol');\n\nconst grantsObject = require('../helper/access_control');\n\nconst Helper = require('../helper/helper');\n\nconst helper = new Helper();\n\n\nconst ac = new AccessControl(grantsObject);\n\n\n\nexports.new = async (req, res) => {\n  try {\n    let docObj = {\n      name: req.body.name,\n      filetype: req.body.filetype,\n      doc: req.body.doc,\n      project: req.body.projectId,\n      filesize:req.body.filesize\n\n    };\n\n    let saveDocument = await new Document(docObj).save();\n\n    if (Boolean(saveDocument)) {\n\n      let project = await Project.findOne({\n        _id: req.body.projectId,\n        owner: req.userId\n      });\n\n      if (project !== null) {\n\n        console.log(project);\n\n        console.log(\"fetched project we want document to belong to\");\n\n        project = project.toJSON();\n        let collectionOfDocIds = project.documents;\n\n        if (collectionOfDocIds.length > 0) {\n          collectionOfDocIds = collectionOfDocIds.map(t => {\n            return t._id;\n          });\n        }\n\n        // console.log(\" document belonging to project\", collectionOfDocIds);\n\n        // let check = collectionOfDocIds.find(elem => {\n        //   return elem == saveDocument._id;\n        // });\n\n        // console.log(\"check if document id exists already\", { check });\n\n        // if (Boolean(check) === false) {\n        let updateRequest = await Project.update(\n          { _id: req.body.projectId, owner: req.userId },\n          {\n            $set: {\n              documents: [...collectionOfDocIds, saveDocument._id]\n            }\n          }\n        );\n\n        console.log(\"what i expect to update\", {\n          documents: [...collectionOfDocIds, saveDocument._id]\n        });\n\n        if (Boolean(updateRequest.n)) {\n          return res\n            .status(200)\n            .json({ message: \"Document Saved Successfully\" });\n        } else {\n          return res.status(401).json({\n            message: \"Could Not Add New Document\"\n          });\n        }\n        // }\n      } else {\n        return res.status(401).json({ message: \"This Project doesn't exist\" })\n      }\n    } else {\n      return res.status(200).json({\n        message: \"Failed to save Document\"\n      });\n    }\n  } catch (error) {\n    return res.status(401).json({\n      message: error.message\n    });\n  }\n};\n\nexports.findAll = async (req, res) => {\n  let projectId = req.body.projectId;\n\n\n  // const role = helper.getRole(req, res);\n  // const permission = ac.can(role).readAny('document');\n\n  // if (permission.granted) {\n    try {\n      let documents = await Document.find({ project: projectId });\n\n      if (Boolean(documents) && Boolean(documents.length > 0)) {\n        return res.status(200).json(documents);\n      } else {\n        return res.status(404).json({\n          message: \"No Documents Found\"\n        });\n      }\n    } catch (error) {\n      return res.status(401).json({\n        message: error.message\n      });\n    }\n  // } else {\n  //   return res.status(403).json({ message: 'forbidden' });\n  // }\n\n};\n\n\nexports.find = async (req, res) => {\n  try {\n    let findReq = await Document.findOne({ _id: req.params.id });\n    findReq = findReq.toJSON();\n\n    if (Boolean(findReq)) {\n      return res.status(200).json({\n        success: true,\n        info: findReq\n      });\n    } else {\n      return res.status(404).json({\n        message: \"No Document Found\",\n        success: false\n      });\n    }\n  } catch (error) {\n    res.status(401).json({\n      message: error.message\n    });\n  }\n};\n"]}