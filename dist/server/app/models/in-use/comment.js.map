{"version":3,"sources":["../../../../../app/models/in-use/comment.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","file":"comment.js","sourcesContent":["// const mongoose = require(\"mongoose\");\n// const Schema = mongoose.Schema;\n// const ObjectId = Schema.Types.ObjectId;\n// const autoPopulate = require(\"mongoose-autopopulate\");\n// const _ = require(\"underscore\");\n\n// const mongoosePaginate=require('mongoose-paginate'); \n\n// const Project = require('./project');\n\n\n// const schemaOptions = {\n//     minimize: false,\n//     id: false,\n//     toJSON: {\n//         getters: true,\n//         virtuals: true,\n//         minimize: false,\n//         versionKey: false,\n//         retainKeyOrder: true\n//     },\n//     toObject: {\n//         getters: true,\n//         virtuals: true,\n//         minimize: false,\n//         versionKey: false,\n//         retainKeyOrder: true\n//     },\n//     timestamps:true,\n//     autoIndex: process.env.NODE_ENV === \"development\",\n//     strict: process.env.NODE_ENV !== \"development\"\n// };\n\n// const commentStructure = {\n//     project: {\n//         type: ObjectId,\n//         ref: \"Project\",\n//         autopopulate: {\n//             select:\n//                 \"name activated _id, owner stakeholders\"\n//         }\n//     },\n\n//     actor: {\n//         type: ObjectId,\n//         ref: \"User\", autopopulate: {\n//             select:\n//                 \"firstName lastName _id socket email \"\n//         }\n//     },\n   \n// };\n\n\n// if (process.env.NODE_ENV === \"development\") {\n//     commentStructure.test = {\n//         type: Boolean,\n//         default: true\n//     };\n// }\n\n\n// const commentSchema = new Schema(commentStructure,schemaOptions);\n\n// // commentSchema.post('remove', async (next) => {\n// //     try {\n// //         await Project.update({}, { $pull: { proposals: { _id: this._id } } })\n// //     } catch (error) {\n// //         next(error)\n// //     }\n// // });\n\n// commentSchema.plugin(autoPopulate);\n// commentSchema.plugin(mongoosePaginate);\n\n// module.exports = mongoose.model(\"Comment\", commentSchema);\n"]}