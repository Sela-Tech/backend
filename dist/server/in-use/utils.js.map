{"version":3,"sources":["../../../in-use/utils.js"],"names":["visibilityHeaderField","tokenHeaderField","jwt","require","exports","verifyToken","req","res","next","whitelisted","token","headers","publicView","isWhitelisted","Boolean","filter","path","url","length","tokenExists","split","status","json","message","verify","process","env","SECRET","err","decoded","userRoles","isFunder","isEvaluator","isContractor","isAdmin","roles","Object","keys","k","userId","id","decodedTokenData","generalError","send","pageNotFound","getHost","origin","get"],"mappings":"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","file":"utils.js","sourcesContent":["var visibilityHeaderField = \"public\";\nvar tokenHeaderField = \"x-access-token\";\n\nvar jwt = require(\"jsonwebtoken\");\n\nexports.verifyToken = (req, res, next) => {\n  const whitelisted = [\"/projects\", \"/projects/:id\"];\n\n  const token = req.headers[tokenHeaderField] || req.headers['authorization'],\n  publicView = req.headers[visibilityHeaderField];\n\n  if (typeof token === \"undefined\" && publicView) {\n    // check if the route is whitelisted\n\n    let isWhitelisted = Boolean(\n      whitelisted.filter(url => {\n        return req.path === url;\n      }).length\n    );\n\n    req.tokenExists = false;\n\n    if (whitelisted[1].split(\"/\").length === req.path.split(\"/\").length) {\n      isWhitelisted = true;\n    }\n\n    if (isWhitelisted) {\n      next();\n    } else {\n      res.status(400).json({\n        message: \"No Token Provided\"\n      });\n    }\n  } else if (typeof token !== \"undefined\") {\n    jwt.verify(token, process.env.SECRET, function(err, decoded) {\n      if (err) {\n        return res.status(400).json({\n          message: err.message\n        });\n      } else {\n        \n        const userRoles={\n          isFunder:decoded.isFunder,\n           isEvaluator:decoded.isEvaluator, \n           isContractor:decoded.isContractor,\n           isAdmin:decoded.isAdmin || false\n        }\n\n        req.roles = Object.keys(userRoles).filter(k => userRoles[k] === true);\n\n        // if (req.roles.length > 1) {\n        //   req.roles;\n        // }\n\n        req.tokenExists = true;\n        req.userId = decoded.id;\n        req.decodedTokenData = decoded;\n        next();\n      }\n    });\n  } else {\n    res.status(400).json({\n      message: \"No Token Provided\"\n    });\n  }\n};\n\n\nexports.generalError = function(err, req, res, next) {\n  res.status(err.status || 500);\n  res.send(err.message);\n};\n\nexports.pageNotFound = function(req, res, next) {\n  res.status(404);\n  res.send({\n    message: \"Route Not Found\"\n  });\n};\n\n\nexports.getHost = (req)=>{\n  var origin = req.get('origin') || req.get('host');\n   return origin;\n}"]}