{"version":3,"sources":["../../../../app/controllers/milestone.js"],"names":["require","config","mongoose","Task","model","Project","Milestone","validate","_","Milestones","req","res","successRes","success","failRes","validateAddMilestone","errors","validationErrors","status","json","message","roles","includes","body","title","tasks","projectId","uniqTasks","uniq","find","_id","project","createdBy","userId","taskDetails","length","taskIds","map","t","milestoneObj","save","milestone","updateMany","$set","isInMilestone","console","log","findById","params","id","firstName","lastName","completed","estimatedCost","reduce","y","z","createdAt","updatedAt","name","description","dueDate","assignedTo","query","milestones","Boolean","m","module","exports"],"mappings":"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","file":"milestone.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nconst mongoose = require(\"mongoose\"),\n    Task = mongoose.model(\"Task\"),\n    Project = mongoose.model(\"Project\"),\n    Milestone = mongoose.model('Milestone');\nconst validate = require('../../middleware/validate');\nconst _ = require('lodash');\n\n\n\n/**\n *\n *\n * @class Milestones\n */\nclass Milestones {\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Milestones\n     */\n    static async newMilestone(req, res) {\n\n        let successRes = { success: true };\n        let failRes = { success: false };\n\n        validate.validateAddMilestone(req, res)\n        const errors = req.validationErrors();\n\n        if (errors) {\n            return res.status(400).json({\n                message: errors\n            });\n        }\n\n        try {\n\n            //use access control instead of the block of code immediately below\n            if (!req.roles.includes('isContractor')) {\n                return res.status(403).json({ message: \"forbidden\" })\n            }\n            const { body: { title, tasks, projectId } } = req;\n            let uniqTasks = _.uniq(tasks);\n            let taskDetails = await Task.find({ _id: [...uniqTasks], project: projectId, createdBy: req.userId });\n            if (taskDetails.length < 1) {\n                return res.status(404).json({ message: \"Tasks not found\" });\n            }\n\n            // let estimatedCost = taskDetails.map(t => t.estimatedCost).reduce((x, y) => { return x + y });\n            let taskIds = taskDetails.map(t => t._id);\n\n            let milestoneObj = {\n                createdBy: req.userId,\n                // estimatedCost,\n                title,\n                project: projectId,\n                tasks: [...taskIds]\n            }\n\n            let milestone = await new Milestone(milestoneObj).save();\n\n            await Task.updateMany({ _id: [...taskIds] }, { $set: { isInMilestone: true } });\n\n            if (milestone) {\n                return res.status(201).json({ success: successRes.success, milestone })\n            }\n\n        } catch (error) {\n            console.log(error);\n            return res.status(501).json({\n                message: error.message\n            });\n        }\n    }\n\n\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Tasks\n     */\n    static async singleMileStone(req, res) {\n        try {\n            let milestone = await Milestone.findById(req.params.id);\n\n            if (milestone) {\n\n                milestone = {\n                    _id: milestone._id,\n                    project: milestone.project,\n                    title: milestone.title,\n                    createdBy: {\n                        _id: milestone.createdBy._id,\n                        firstName: milestone.createdBy.firstName,\n                        lastName: milestone.createdBy.lastName\n                    },\n                    completed: milestone.completed,\n                    estimatedCost: milestone.tasks.map(t => t.estimatedCost).reduce((y, z) => y + z),\n                    createdAt: milestone.createdAt,\n                    updatedAt: milestone.updatedAt,\n                    tasks: milestone.tasks.map((t) => {\n                        return {\n                            _id: t._id,\n                            name: t.name,\n                            description: t.description,\n                            status: t.status,\n                            estimatedCost: t.estimatedCost,\n                            dueDate: t.dueDate,\n                            assignedTo: {\n                                _id: t.assignedTo._id,\n                                firstName: t.assignedTo.firstName,\n                                lastName: t.assignedTo.lastName\n                            },\n                            createdBy: {\n                                _id: t.createdBy._id,\n                                firstName: t.createdBy.firstName,\n                                lastName: t.createdBy.lastName\n                            },\n                            createdAt: t.createdAt,\n                            updatedAt: t.updatedAt\n                        }\n                    })\n\n                }\n                return res.status(200).json({ milestone })\n            }\n            return res.status(404).json({ message: \"Milestone Not Found\" })\n        } catch (error) {\n            console.log(error);\n            return res.status(501).json({\n                message: error.message\n            });\n        }\n    }\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns\n     * @memberof Milestones\n     */\n    static async allMilestones(req, res) {\n        let projectId = req.query.project;\n        try {\n            let project = await Project.findById(projectId);\n            if (!project || project === null) {\n                return res.status(404).json({ message: 'Project Not found.' });\n            }\n\n\n            let milestones = await Milestone.find({ project: projectId });\n\n            if (Boolean(milestones) && Boolean(milestones.length > 0)) {\n                milestones = milestones.map((m) => {\n                    return {\n                        _id: m._id,\n                        project: m.project,\n                        title: m.title,\n                        createdBy: {\n                            _id: m.createdBy._id,\n                            firstName: m.createdBy.firstName,\n                            lastName: m.createdBy.lastName\n                        },\n                        completed: m.completed,\n                        estimatedCost: m.tasks.map(t => t.estimatedCost).reduce((y, z) => y + z),\n                        createdAt: m.createdAt,\n                        updatedAt: m.updatedAt,\n                        tasks: m.tasks.map((t) => {\n                            return {\n                                _id: t._id,\n                                name: t.name,\n                                description: t.description,\n                                status: t.status,\n                                estimatedCost: t.estimatedCost,\n                                dueDate: t.dueDate,\n                                assignedTo: {\n                                    _id: t.assignedTo._id,\n                                    firstName: t.assignedTo.firstName,\n                                    lastName: t.assignedTo.lastName\n                                },\n                                createdBy: {\n                                    _id: t.createdBy._id,\n                                    firstName: t.createdBy.firstName,\n                                    lastName: t.createdBy.lastName\n                                },\n                                createdAt: t.createdAt,\n                                updatedAt: t.updatedAt\n                            }\n                        })\n                    }\n                })\n                return res.status(200).json(milestones);\n            } else {\n                return res.status(200).json({\n                    message: \"No milestones for this project\"\n                });\n            }\n        } catch (error) {\n            return res.status(501).json({\n                message: error.message\n            });\n        }\n    }\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @memberof Milestones\n     */\n    static async updateMilestone(req, res) {\n\n    }\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @memberof Milestones\n     */\n    static async deleteMilestone(req, res) {\n\n    }\n}\n\nmodule.exports = { Milestones };\n\n"]}