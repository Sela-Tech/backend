{"version":3,"sources":["../../../../app/controllers/task.js"],"names":["require","config","mongoose","Task","model","Project","validate","Tasks","req","res","userRole","roles","successRes","success","failRes","validateAddTask","errors","validationErrors","status","json","message","taskObj","name","body","description","dueDate","project","projectId","estimatedCost","createdBy","userId","findById","assignedTo","includes","save","task","console","log","params","id","query","find","tasks","Boolean","length","findOne","_id","updateObj","update","$set","updatedTask","module","exports"],"mappings":"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","file":"task.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nconst mongoose = require(\"mongoose\"),\n  Task = mongoose.model(\"Task\"),\n  Project = mongoose.model(\"Project\");\nconst validate = require('../../middleware/validate');\nclass Tasks {\n\n  static async newTask(req, res) {\n    let userRole = req.roles;\n\n    let successRes = { success: true };\n    let failRes = { success: false };\n\n    validate.validateAddTask(req, res)\n    const errors = req.validationErrors();\n\n    if (errors) {\n      return res.status(400).json({\n        message: errors\n      });\n    }\n\n    try {\n      let taskObj = {\n        name: req.body.name,\n        description: req.body.description,\n        dueDate: req.body.dueDate,\n        project: req.body.projectId,\n        estimatedCost: req.body.estimatedCost,\n        createdBy: req.userId\n      };\n\n      // check of project exist\n\n      let project = await Project.findById(taskObj.project);\n\n      if (!project) {\n        return res.status(404).json({ message: 'Project Not Found.' })\n      }\n\n      // let available_contractor;\n      let assignedTo;\n\n      // check available contractor\n      // if(project.stakeholders.length<1){\n      //   return res.status(403).json({ message: \"Become a stakeholder by joining the project\" })\n      // }\n\n      // available_contractor= project.stakeholders.filter(s=>s.user.information.isContractor===true);\n\n\n      // if(available_contractor.length<1){\n      //     return res.status(404).json({message:'No contractor has been added to this project'});\n      // }\n\n      // check if who is adding the task is a contractor\n      // check if he is part of the project\n      // let isProjectContractor = available_contractor.some(c=>c.user.information._id.toString() === req.userId && c.user.status==='ACCEPTED' );\n      // if(userRole.includes('isContractor') && !isProjectContractor){\n      //   return res.status(401).json({message:'Sorry, You are not a contractor on this project'})\n      // }else \n      if (userRole.includes('isContractor')) {\n        assignedTo = req.userId;\n      } else {\n        return res.status(403).json({ message: 'You are not allowed to perform this operation' })\n      }\n\n      taskObj.assignedTo = assignedTo;\n      taskObj.status = 'ASSIGNED';\n\n      let task = await new Task(taskObj).save();\n\n      if (task) {\n        successRes.message = \"Task has been added\";\n        successRes.task = task;\n        return res.status(201).json(successRes)\n      }\n\n    } catch (error) {\n      console.log(error);\n      return res.status(501).json({\n        message: error.message\n      });\n    }\n  }\n\n\n  /**\n   *\n   *\n   * @static\n   * @param {*} req\n   * @param {*} res\n   * @returns {object} returns an array objects(tasks)\n   * @memberof Tasks\n   */\n\n  static async singleTask(req, res) {\n    try {\n      let task = await Task.findById(req.params.id);\n\n      if (task) {\n        return res.status(200).json({ task })\n      }\n      return res.status(404).json({ message: \"Task Not Found\" })\n    } catch (error) {\n      console.log(error);\n      return res.status(501).json({\n        message: error.message\n      });\n    }\n  }\n\n\n\n  /**\n   *\n   *\n   * @static\n   * @param {*} req\n   * @param {*} res\n   * @returns\n   * @memberof Tasks\n   */\n  static async allTasks(req, res) {\n    let projectId = req.query.project;\n    try {\n      let tasks = await Task.find({ project: projectId });\n\n      if (Boolean(tasks) && Boolean(tasks.length > 0)) {\n        return res.status(200).json(tasks);\n      } else {\n        return res.status(200).json({\n          tasks: []\n        });\n      }\n    } catch (error) {\n      return res.status(401).json({\n        message: error.message\n      });\n    }\n  }\n\n  /**\n   *\n   *\n   * @static\n   * @param {*} req\n   * @param {*} res\n   * @returns {object} a message confirming task succussfully updated\n   * @memberof Tasks\n   * @description a method for updating a task created by the contractor.\n   */\n  static async updateTask(req, res) {\n\n    const { id } = req.params;\n    validate.validateAddTask(req, res)\n    const errors = req.validationErrors();\n\n    if (errors) {\n      return res.status(400).json({\n        message: errors\n      });\n    }\n    try {\n      let task = await Task.findOne({ _id: id, createdBy: req.userId });\n      if (!task) {\n        return res.status(404).json({ message: \"Task Not Found\" })\n      }\n\n      let updateObj = req.body;\n\n\n      let updatedTask = await Task.update({ _id: id }, { $set: updateObj });\n      if (updatedTask) return res.status(200).json({ message: 'Task has been updated.' })\n    } catch (error) {\n      return res.status(401).json({\n        message: error.message\n      });\n    }\n\n\n  }\n\n  static async deleteTask(req, res) {\n\n  }\n}\n\nmodule.exports = { Tasks };\n\n"]}