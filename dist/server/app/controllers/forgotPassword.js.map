{"version":3,"sources":["../../../../app/controllers/forgotPassword.js"],"names":["validate","require","sgMail","mongoose","User","model","crypto","emailTemplates","options","apiKey","process","env","AFRICAS_TALKING_API","username","AFRICAS_TALKING_APP_USERNAME","AfricasTalking","getHost","setApiKey","SEND_GRID_API","sms","SMS","ForgotPassword","req","res","body","email","phone","queryObj","toLowerCase","findOne","user","status","json","message","verificationCode","randomBytes","toString","resetPasswordToken","resetPasswordExpires","Date","now","save","updatedUser","receiver","to","msg","send","result","token","host","from","subject","html","requestResetPassword","firstName","error","console","log","validateResetPassword","errors","validationErrors","newPassword","query","$gt","password","resetPasswordSuccess","module","exports"],"mappings":"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","file":"forgotPassword.js","sourcesContent":["const validate = require('../../middleware/validate');\n\nconst sgMail = require('@sendgrid/mail');\n\nconst mongoose = require('mongoose');\n\nconst User = mongoose.model('User');\n\nconst crypto = require('crypto');\n\nconst emailTemplates= require('../helper/emailTemplates');\n\n\nconst options = {\n    apiKey: process.env.AFRICAS_TALKING_API,         \n    username: process.env.AFRICAS_TALKING_APP_USERNAME\n};\n\nconst AfricasTalking = require('africastalking')(options);\n\n\nconst { getHost } = require(\"../../in-use/utils\");\n\nsgMail.setApiKey(process.env.SEND_GRID_API);\n\nlet sms = AfricasTalking.SMS;\n\n\n/**\n *\n *\n * @class ForgotPassword\n */\n\nclass ForgotPassword {\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns {object} a confirmation or failure message.\n     * @memberof ForgotPassword\n     */\n\n    static async requestPasswordReset(req, res) {\n\n        const { body: { email, phone } } = req;\n\n        let queryObj = email ? { email: email.toLowerCase() } : { phone }\n\n        let user = await User.findOne(queryObj);\n\n        if (user === null) {\n            return res.status(404).json({ message: `Sela does not have an account with those user credentials. Please try another email/phone number.` })\n        }\n\n        try {\n\n            if (req.body.phone && req.body.phone !== \"\" && !req.body.email || req.body.email == \"\") {\n                let verificationCode = crypto.randomBytes(3).toString('hex');\n\n                user.resetPasswordToken = verificationCode;\n                user.resetPasswordExpires = Date.now() + 3600000 // 1 hour\n\n\n                let updatedUser = await user.save();\n\n                const receiver = '+234' + req.body.phone;\n                const to = [receiver];\n\n                if (updatedUser) {\n\n                    const msg = {\n                        to: to,\n                        message: 'You are receiving this message because you (or someone else) have requested the reset of the password for your account. ' +\n                            'Please use this code to reset your password: ' +\n                            verificationCode +\n                            ' If you did not request this, please ignore this message and your password will remain unchanged.'\n                        // from: '75111'\n                    }\n\n                    let result = await sms.send(msg);\n                \n                    // if(result){\n                    return res.status(200).json({ message: `A message has been sent to ${updatedUser.phone} with further instructions` })\n                    // }\n                }\n\n            } else if (req.body.email && req.body.email !== \"\" && !req.body.phone || req.body.phone == \"\") {\n\n                let token = crypto.randomBytes(20).toString('hex');\n\n                user.resetPasswordToken = token;\n                user.resetPasswordExpires = Date.now() + 3600000 // 1 hour\n\n\n                let updatedUser = await user.save();\n\n            if (updatedUser) {\n                // const text='You are receiving this because you (or someone else) have requested the reset of the password for your account.\\n\\n' +\n                // 'Please click on the following link, or paste this into your browser to complete the process:\\n\\n' +\n                // getHost(req) + '/password/reset?token=' + token + '\\n\\n' +\n                // 'If you did not request this, please ignore this email and your password will remain unchanged.\\n'\n\n                const host = getHost(req);\n                const msg = {\n                    to: `${updatedUser.email}`,\n                    from: 'Sela Labs' + '<' + 'support@sela-labs.co' + '>',\n                    subject: \"Password Reset\",\n                    html:emailTemplates.requestResetPassword(host, updatedUser.firstName,token)\n                    };\n                    \n                sgMail.send(msg, false, (error, result) => {\n                    if (error) return console.log(error);\n                    res.status(200).json({ message: `An e-mail has been sent to ${updatedUser.email} with further instructions` })\n                });\n\n            }\n        }\n\n        } catch (error) {\n            console.log(error)\n            res.status(500).json({ message: \"internal server error\" })\n        }\n    }\n    \n\n\n\n    /**\n     *\n     *\n     * @static\n     * @param {*} req\n     * @param {*} res\n     * @returns {Object} A confirmation message or a failure message\n     * @memberof ForgotPassword\n     */\n\n    static async resetPassword(req, res) {\n        validate.validateResetPassword(req, res)\n        const errors = req.validationErrors();\n\n        if (errors) {\n            return res.status(400).json({\n                message: errors\n            });\n        }\n\n        const { newPassword } = req.body;\n\n        try {\n            const token = req.query.token || req.body.verificationCode\n\n            let user = await User.findOne({ resetPasswordToken: token, resetPasswordExpires: { $gt: Date.now() } });\n\n            if (!user) {\n                return res.status(400).json({ message: \"Password reset token is invalid or has expired\" })\n            }\n\n            user.password = newPassword;\n            user.resetPasswordExpires = null;\n            user.resetPasswordToken = null;\n\n            let updatedUser = await user.save();\n\n            if (updatedUser) {\n\n                if (req.body.verificationCode) {\n\n                    const receiver = '+234' + updatedUser.phone;\n                \n                    // send sms\n                    const msg = {\n                        to: [receiver],\n                        message: 'This is a confirmation that the password for your account with sela has just been changed'\n                        // from: '75111'\n                    }\n\n                    let result = await sms.send(msg);\n                    return res.status(200).json({ message: `Your Password has been changed` });\n                }\n\n\n                else if (req.query.token) {\n                    // send email\n                    const msg = {\n                        to: `${updatedUser.email}`,\n                        from: 'Sela Labs' + '<' + 'support@sela-labs.co' + '>',\n                        subject: \"Your password has been changed\",\n                        html:emailTemplates.resetPasswordSuccess(updatedUser.firstName)\n                    };\n\n                    sgMail.send(msg, false, (error, result) => {\n                        if (error) return console.log(error);\n                       return res.status(200).json({ message: `Your Password has been changed` });\n                    });\n\n                }\n\n\n            }\n\n\n        } catch (error) {\n            console.log(error)\n            res.status(500).json({ message: \"internal server error\" })\n        }\n    }\n\n\n}\n\nmodule.exports = ForgotPassword;"]}