{"version":3,"sources":["../../../../app/controllers/project.js"],"names":["require","config","mongoose","Project","model","User","Location","Proposal","moment","notify","Helper","helper","Projects","req","res","successRes","success","failRes","projectObj","body","owner","userId","SHs","newLocation","location","stakeholders","length","map","user","information","s","saveProject","tags","Boolean","newProject","save","newP","findById","_id","project","notifyAddedStakeholders","status","json","findOne","name","lat","lng","err","single","l","message","console","log","checkQuery","limit","parseInt","query","page","skip","otherQueryParams","locationName","tokenExists","find","exec","projects","filter","p","activated","replace","isOwner","params","id","findProjectResponse","headers","projectAvatarKey","avatarKey","locations","proceed","deleteOne","location_delete","result","n","response","removeImgFBucket","updateOne","proposals","toJSON","old_stakeholders","lastName","firstName","breakCode","count","STinfoID","foundMatch","foundPerson","some","e","new_stakeholders","$set","saveResponse","isProjectStakeholder","c","toString","hasSubmitted","proposedBy","proposal","info","image","title","documents","doc","filesize","filetype","createdAt","updatedAt","description","goal","initiated_by","user_type","getRole","avatar","profilePhoto","expected_duration","startDate","format","endDate","sdgs","proposalId","module","exports"],"mappings":"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","file":"project.js","sourcesContent":["\"use strict\";\nrequire(\"dotenv\").config();\nconst mongoose = require(\"mongoose\"),\n  Project = mongoose.model(\"Project\"),\n  User = mongoose.model(\"User\"),\n  Location = mongoose.model(\"Location\"),\n  Proposal = mongoose.model(\"Proposal\");\nconst moment = require('moment')\n\nconst notify = require('../helper/notifications');\nconst Helper = require('../helper/helper');\n\nlet helper = new Helper();\n\n\n/**\n *\n *\n * @class Projects\n */\nclass Projects {\n\n\n  /**\n   *\n   *\n   * @static\n   * @param {*} req\n   * @param {*} res\n   * @returns\n   * @memberof Projects\n   */\n\n  static async newProject(req, res) {\n    var successRes = { success: true };\n    var failRes = { success: false };\n    var projectObj = req.body;\n    projectObj.owner = req.userId;\n    let SHs = [];\n    var newLocation = new Location(req.body.location);\n    try {\n\n      if (projectObj.stakeholders && projectObj.stakeholders.length > 0) {\n        // let shouldAddContractor = await helper.shouldAddContractor(projectObj.stakeholders, null)\n        // if(shouldAddContractor){\n        SHs = [...projectObj.stakeholders];\n        projectObj.stakeholders = projectObj.stakeholders.map(s => {\n          return {\n            user: {\n              information: s\n            }\n          }\n        });\n        // }else{\n        //   failRes.message =\"You cannot add more than one Contractor to a project\";\n        //   console.log(failRes)\n        //   return res.status(400).json(failRes);\n        // }\n\n      } else {\n\n        projectObj.stakeholders = [];\n\n      }\n\n      const saveProject = async projectObj => {\n\n        if (typeof (projectObj.tags) === \"string\" || typeof (projectObj.tags) === \"String\") {\n          projectObj.tags = [projectObj.tags]\n        } else if (Boolean(projectObj.tags) === false) {\n          projectObj.tags = []\n        }\n\n        var newProject = new Project(projectObj);\n        // newProject.save((err, project)=>{\n        //   if (err) {\n        //     failRes.message = err.name + \": \" + err.message;\n        //     return res.status(400).json(failRes);\n        //   }\n\n        //    notify.notifyAddedStakeholders(req, req.body.stakeholders, project)\n        //   return res.status(200).json(successRes);\n        // });\n\n        let newP = await newProject.save();\n\n        if (newP) {\n          let project = await Project.findById(newP._id);\n          if (SHs.length > 0) {\n            await notify.notifyAddedStakeholders(req, SHs, project)\n          }\n          successRes.project = project;\n          return res.status(200).json(successRes);\n        }\n      };\n\n      Location.findOne(\n        {\n          name: req.body.location.name,\n          lat: req.body.location.lat,\n          lng: req.body.location.lng\n        },\n        (err, single) => {\n          if (single === null) {\n            newLocation.save((err, l) => {\n              if (err) return res.status(500).json({ message: err.message });\n              projectObj.location = l._id;\n              saveProject(projectObj);\n            });\n          } else {\n            projectObj.location = single._id;\n            saveProject(projectObj);\n\n          }\n        }\n      );\n    } catch (error) {\n      console.log(error);\n      return res.status(500).json({ message: `internal server error` });\n    }\n  }\n\n\n  /**\n   *\n   *\n   * @static\n   * @param {*} req\n   * @param {*} res\n   * @memberof Projects\n   */\n  static async find(req, res) {\n    var successRes = { success: true };\n    var failRes = { success: false };\n    var checkQuery = {};\n    // limit result else return all\n    let limit = parseInt(req.query.limit ? req.query.limit : 0, 10);\n    // pagination logic\n    let page = req.query.page ? req.query.page : 1;\n    // page hopping logic\n    let skip = parseInt(page * limit - limit, 10);\n    // let the remaining queries stay in the variable\n    let otherQueryParams = req.query;\n    // delete thes because they will affect the look up in the db\n    delete otherQueryParams.limit;\n    delete otherQueryParams.page;\n\n    const locationName = otherQueryParams.location;\n    delete otherQueryParams.location;\n\n    if (req.tokenExists) {\n      checkQuery = { ...otherQueryParams, owner: req.userId };\n    } else {\n      checkQuery = otherQueryParams;\n    }\n\n    Project.find(checkQuery)\n      .skip(skip)\n      .limit(limit)\n      .exec(function (err, projects) {\n        if (!req.tokenExists)\n          projects = projects.filter(p => {\n            return p.activated === true;\n          });\n\n        if (err) {\n          failRes.message = err.message;\n          return res.status(400).json(failRes);\n        }\n        if (!projects)\n          return res.json({\n            message: \"No Projects Found\"\n          });\n\n        if (locationName) {\n          successRes.projects = projects.filter(p => {\n            return p.location.name === locationName.replace(/%20/g, \" \");\n          });\n        } else {\n          if (Boolean(checkQuery.owner)) {\n            projects = projects.map(p => {\n              p.isOwner = true;\n              return p;\n            });\n          }\n          successRes.projects = projects;\n        }\n\n\n        return res.json(successRes);\n      });\n  }\n\n  /**\n   *\n   *\n   * @static\n   * @param {*} req\n   * @param {*} res\n   * @returns\n   * @memberof Projects\n   */\n  static async delete(req, res) {\n    // find the project\n    let findProjectResponse = await Project.findOne({ _id: req.params.id });\n\n    //  make sure the person trying to perform this action, is the owner of the project\n    if (req.userId == findProjectResponse.owner._id) {\n      // if the authorization to delete is provided i.e. true delete the project\n      // in the future, it may become send delete request to admin or something\n      if (req.headers[\"permanent-delete\"] === \"true\") {\n        try {\n          let project = await Project.findOne({ _id: req.params.id });\n          let projectAvatarKey = project.avatarKey;\n\n          // find if multiple projects share a location\n          let locations = await Project.find({ location: project.location });\n\n          let proceed = true;\n          // if only one then delete\n          if (locations.length < 2) {\n            let location_delete = await Location.deleteOne({\n              _id: project.location._id\n            });\n            if (location_delete.result.n === 0) {\n              proceed = false;\n            }\n          }\n\n          if (proceed === true) {\n            // delete project\n            let response = await Project.deleteOne({ _id: req.params.id });\n\n\n            if (response.result.n === 1) {\n              helper.removeImgFBucket(projectAvatarKey);\n              return res.status(200).json({\n                success: true\n              });\n            } else {\n              return res.status(400).json({\n                success: false\n              });\n            }\n          } else {\n            return res.status(400).json({\n              success: false\n            });\n          }\n        } catch (error) {\n          return res.status(400).json({\n            message: error.message\n          });\n        }\n      } else {\n        // just toggle the project's activation status so it's shown or not shown to the public\n        try {\n          let project = await Project.updateOne(\n            { _id: req.params.id },\n            { activated: !findProjectResponse.activated }\n          );\n          if (project.n === 1) {\n            return res.status(200).json({\n              success: true\n            });\n          } else {\n            return res.status(400).json({\n              success: false\n            });\n          }\n        } catch (error) {\n          return res.status(400).json({\n            message: error.message,\n            success: false\n          });\n        }\n      }\n    } else {\n      return res.status(400).json({\n        success: false,\n        message: \"You don't have the rights\"\n      });\n    }\n  }\n\n\n  /**\n   *\n   *\n   * @static\n   * @param {*} req\n   * @param {*} res\n   * @memberof Projects\n   */\n  static async find_one(req, res) {\n    try {\n      let project = await Project.findOne({ _id: req.params.id });\n\n      // lazy load proposals related to project\n\n      let proposals =await Proposal.find({project:project._id})\n\n      if (project.activated === true || project.owner._id == req.userId) {\n        project = project.toJSON();\n\n        project.isOwner = project.owner._id == req.userId;\n        project.proposals = proposals;\n        res.status(200).json(project);\n      } else {\n        res.status(400).json({\n          message: \"This project has been de-activated\"\n        });\n      }\n    } catch (error) {\n      res.status(400).json({\n        message: error.message\n      });\n    }\n  }\n\n\n  /**\n   *\n   *\n   * @static\n   * @param {*} req\n   * @param {*} res\n   * @returns\n   * @memberof Projects\n   */\n  static async add_stakeholder(req, res) {\n    try {\n\n      let stakeholders = req.body.stakeholders.map(s => {\n        return {\n          user: {\n            information: s\n          }\n        }\n      });\n      let project = await Project.findOne({ _id: req.body.id });\n\n      // let shouldAddContractor = await helper.shouldAddContractor(req.body.stakeholders, project.stakeholders);\n\n      const old_stakeholders = project.stakeholders.map(s => ({\n        user: {\n          information: `${s.user.information._id}`,\n          name: `${s.user.information.lastName} ${s.user.information.firstName}`\n        }\n      }));\n\n      let breakCode = false;\n      let count = 0;\n      let STinfoID;\n      let foundMatch = false;\n      let foundPerson = {};\n\n      if (req.body.stakeholders.length > 0) {\n        while (breakCode === false) {\n\n          foundMatch = old_stakeholders.some(e => {\n            STinfoID = stakeholders[count].user.information;\n            foundPerson = e.user.name;\n            return e.user.information === STinfoID;\n          });\n\n          if (foundMatch === true) breakCode = true;\n          count = count + 1;\n\n          if (count === req.body.stakeholders.length) breakCode = true;\n        }\n\n        if (breakCode === true && foundMatch === true) {\n          return res.status(401).json({\n            message: `Cannot add stakeholders because: \"This project has a connection with ${foundPerson}\" `\n          });\n        }\n\n\n        // if (shouldAddContractor) {\n\n        let new_stakeholders = [...old_stakeholders, ...stakeholders];\n\n        let saveResponse = await Project.updateOne(\n          { _id: req.body.id },\n          { $set: { stakeholders: new_stakeholders } }\n        );\n\n        if (saveResponse.n === 1) {\n          await notify.notifyAddedStakeholders(req, req.body.stakeholders, project);\n          return res.status(200).json({\n            message: \"Stakeholder Added Sucessfully\"\n          });\n        }\n\n        // } else {\n        //   return res.status(401).json({\n        //     message: \"You cannot add more than one Contractor to a project\"\n        //   });\n        // }\n      } else {\n        res.status(200).json({\n          message: \"No Stakeholder Information Provided\"\n        });\n      }\n    } catch (error) {\n      console.log(error)\n      res.status(401).json({\n        message: \"Stakeholder could not be added\"\n      });\n    }\n  }\n\n\n  /**\n   *\n   *\n   * @static\n   * @param {*} req\n   * @param {*} res\n   * @memberof Projects\n   * @returns {object}\n   * @description returns the details of a project as seen by a contractor viewing \n   *              a project initiated byothers\n   */\n  static async contractorViewProjectDetails(req, res) {\n\n    try {\n      // check if project exists\n      let project = await Project.findById(req.params.id)\n\n\n      if (!project) {\n        return res.status(404).json({ message: \"Project does not exist\" });\n      }\n\n      // check if he a stakeholder on the project\n      let isProjectStakeholder = project.stakeholders.some(c => c.user.information._id.toString() === req.userId && c.user.status === 'ACCEPTED')\n\n      // check if contractor has submitted a proposal already\n\n      let hasSubmitted;\n\n      let proposal = await Proposal.findOne({ proposedBy: req.userId, project: req.params.id });\n      proposal ? hasSubmitted = true : hasSubmitted = false;\n      const info = {\n        image: project[\"project-avatar\"],\n        title: project.name,\n        documents: project.documents.map((doc) => {\n          return {\n            name: doc.name,\n            _id: doc._id,\n            filesize: doc.filesize || null,\n            doc: doc.doc,\n            filetype: doc.filetype,\n            project:doc.project,\n            createdAt:doc.createdAt,\n            updatedAt:doc.updatedAt\n          }\n        }),\n        isProjectStakeholder,\n        hasSubmitted,\n        status: project.status,\n        description: project.description,\n        goal: `${`$${project.goal}`}`,\n        location: project.location.name,\n        initiated_by: {\n          id: project.owner._id,\n          name: `${project.owner.firstName} ${project.owner.lastName}`,\n          user_type: helper.getRole(project.owner),\n          avatar: project.owner.profilePhoto\n        },\n        expected_duration: `${moment(project.startDate).format(\"DD MMM YY\")} - ${moment(project.endDate).format(\"DD MMM YY\")}`,\n        sdgs: project.tags\n      }\n\n      if(hasSubmitted){\n        info.proposalId= proposal._id;\n      }else{\n        info.proposalId=null;\n      }\n\n      return res.status(200).json(info);\n    } catch (error) {\n      console.log(error);\n      return res.status(501).json({\n        message: error.message\n      });\n    }\n\n  }\n\n\n}\n\n\n\nmodule.exports = { Projects }\n\n\n\n\n\n\n\n\n"]}